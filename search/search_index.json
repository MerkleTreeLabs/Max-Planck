{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Max Planck","text":"<p>The Max Planck Discord bot is built in JavaScript primarily utilizing the express api and discord JS, along with multiple other packages to make this all function.</p> <p>Documentation for the Max Plank Discord Bot</p> <p>This documentation covers technical installation, configuration and deployment of the bot as well as advanced developer documentation and API information.</p> <p>For information on adding the bot to your guild, or how to interact with the bot you want the user documentation hosted at Max-Planck.MerkleTreeLabs.com/Docs</p> <p>Help and Support</p> <p>A brief overview is provided below, otherwise details can be found in the sidebar. Please read the docs, use the search, and if you still have issues join the Discord and chat us up!</p> <p></p>"},{"location":"#general_flow","title":"General Flow","text":"graph TD     A[User Interaction]     A --&gt;|Web Dashboard| B[max-planck.merkletreelabs.com]     A --&gt;|Discord App| C[Discord.js API]     B --&gt; D[Node.js Server]     C --&gt; D     D --&gt; E[Blockchain Interaction Module]     E --&gt;|Connects to| F[QRL Node]     E --&gt;|Connects to| G[ZOND Node]     D --&gt; H[Database]     D --&gt; I[Configuration Files]     I --&gt;|Stores| J[API Keys and Secrets]     H --&gt;|Data| K[User Data and Metrics]     D --&gt; L[Bot Logic and Functions]  <pre><code>/home/fr1t2/\n    \u2514\u2500\u2500 zond-bot\n        \u251c\u2500\u2500 docs\n        \u251c\u2500\u2500 package.json\n        \u251c\u2500\u2500 README.md\n        \u2514\u2500\u2500 src\n            \u251c\u2500\u2500 api\n            \u2502   \u251c\u2500\u2500 routes\n            \u2502   \u2514\u2500\u2500 server.js\n            \u251c\u2500\u2500 bots\n            \u2502   \u2514\u2500\u2500 discord\n            \u251c\u2500\u2500 config.json.example\n            \u251c\u2500\u2500 emojiCharacters.js\n            \u251c\u2500\u2500 helpers.js\n            \u251c\u2500\u2500 rules.js\n            \u251c\u2500\u2500 scripts\n            \u2502   \u251c\u2500\u2500 service_files\n            \u2502   \u2514\u2500\u2500 startup\n            \u251c\u2500\u2500 services\n            \u2502   \u251c\u2500\u2500 chain\n            \u2502   \u2514\u2500\u2500 database\n            \u2514\u2500\u2500 swaggerConfig.js\n</code></pre>"},{"location":"#bot_setup","title":"Bot Setup","text":"<p>Setting up the bot is complex and multifaceted. We have broken these into multiple documents to make this a little easier. Please follow each step and ensure that the full instruction is complete as they are all required.</p>"},{"location":"#hosting_server","title":"Hosting Server","text":"<p>This guide is written with the entire project ran from a VPS or single server hosted somewhere that is powerful enough for all of the functions we need to operate. This curently sits at 8Gb of RAM and 300Gb NVMe vps with 4 cores.</p> <p>This server will need to be connected to the net so hardening steps are required for security practices.</p>"},{"location":"#nodes","title":"Node\u2019s","text":""},{"location":"#zond","title":"Zond","text":"<p>A full archive Zond node is required for chain lookup functions past a few months. This requires additional bandwidth, drive space and ram to run as it syncs and keeps all blocks in the chain.</p> <p>The Zond node is 2 packages working together, consensus and validation. We need to run both Go-Zond and Qrysm on this server.</p>"},{"location":"#qrl","title":"QRL","text":"<p>To access the legacy functionality of the old TipBot, Max Planck will need access to the QRL chain as well. This includes syncing the node and storing all of the chain in storage. At the time of writing it was close to 20Gb in size.</p> <p>Max Planck will utilize the extensible wallet functionality that comes with the <code>walletd-rest-proxy</code> and the <code>walletd</code></p>"},{"location":"Contribution/","title":"Contributions","text":"<p>Contributions welcome!</p>"},{"location":"License/","title":"GNU AFFERO GENERAL PUBLIC LICENSE","text":"<p>Version 3, 19 November 2007</p> <p>Copyright \u00a9 2007 Free Software Foundation, Inc. https://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.</p>"},{"location":"License/#preamble","title":"Preamble","text":"<p>The GNU Affero General Public License is a free, copyleft license for software and other kinds of works, specifically designed to ensure cooperation with the community in the case of network server software.</p> <p>The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, our General Public Licenses are intended to guarantee your freedom to share and change all versions of a program\u2013to make sure it remains free software for all its users.</p> <p>When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.</p> <p>Developers that use our General Public Licenses protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License which gives you legal permission to copy, distribute and/or modify the software.</p> <p>A secondary benefit of defending all users\u2019 freedom is that improvements made in alternate versions of the program, if they receive widespread use, become available for other developers to incorporate. Many developers of free software are heartened and encouraged by the resulting cooperation. However, in the case of software used on network servers, this result may fail to come about. The GNU General Public License permits making a modified version and letting the public access it on a server without ever releasing its source code to the public.</p> <p>The GNU Affero General Public License is designed specifically to ensure that, in such cases, the modified source code becomes available to the community. It requires the operator of a network server to provide the source code of the modified version running there to the users of that server. Therefore, public use of a modified version, on a publicly accessible server, gives the public access to the source code of the modified version.</p> <p>An older license, called the Affero General Public License and published by Affero, was designed to accomplish similar goals. This is a different license, not a version of the Affero GPL, but Affero has released a new version of the Affero GPL which permits relicensing under this license.</p> <p>The precise terms and conditions for copying, distribution and modification follow.</p>"},{"location":"License/#terms_and_conditions","title":"TERMS AND CONDITIONS","text":""},{"location":"License/#0_definitions","title":"0. Definitions.","text":"<p>\u201cThis License\u201d refers to version 3 of the GNU Affero General Public License.</p> <p>\u201cCopyright\u201d also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.</p> <p>\u201cThe Program\u201d refers to any copyrightable work licensed under this License. Each licensee is addressed as \u201cyou\u201d. \u201cLicensees\u201d and \u201crecipients\u201d may be individuals or organizations.</p> <p>To \u201cmodify\u201d a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \u201cmodified version\u201d of the earlier work or a work \u201cbased on\u201d the earlier work.</p> <p>A \u201ccovered work\u201d means either the unmodified Program or a work based on the Program.</p> <p>To \u201cpropagate\u201d a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.</p> <p>To \u201cconvey\u201d a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.</p> <p>An interactive user interface displays \u201cAppropriate Legal Notices\u201d to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.</p>"},{"location":"License/#1_source_code","title":"1. Source Code.","text":"<p>The \u201csource code\u201d for a work means the preferred form of the work for making modifications to it. \u201cObject code\u201d means any non-source form of a work.</p> <p>A \u201cStandard Interface\u201d means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.</p> <p>The \u201cSystem Libraries\u201d of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \u201cMajor Component\u201d, in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.</p> <p>The \u201cCorresponding Source\u201d for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work\u2019s System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.</p> <p>The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.</p> <p>The Corresponding Source for a work in source code form is that same work.</p>"},{"location":"License/#2_basic_permissions","title":"2. Basic Permissions.","text":"<p>All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.</p> <p>You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.</p> <p>Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.</p>"},{"location":"License/#3_protecting_users_legal_rights_from_anti-circumvention_law","title":"3. Protecting Users\u2019 Legal Rights From Anti-Circumvention Law.","text":"<p>No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.</p> <p>When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work\u2019s users, your or third parties\u2019 legal rights to forbid circumvention of technological measures.</p>"},{"location":"License/#4_conveying_verbatim_copies","title":"4. Conveying Verbatim Copies.","text":"<p>You may convey verbatim copies of the Program\u2019s source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.</p> <p>You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.</p>"},{"location":"License/#5_conveying_modified_source_versions","title":"5. Conveying Modified Source Versions.","text":"<p>You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:</p> <p>a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \u201ckeep intact all notices\u201d. c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \u201caggregate\u201d if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation\u2019s users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.</p>"},{"location":"License/#6_conveying_non-source_forms","title":"6. Conveying Non-Source Forms.","text":"<p>You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:</p> <p>a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.</p> <p>A \u201cUser Product\u201d is either (1) a \u201cconsumer product\u201d, which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \u201cnormally used\u201d refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.</p> <p>\u201cInstallation Information\u201d for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.</p> <p>If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).</p> <p>The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.</p> <p>Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.</p>"},{"location":"License/#7_additional_terms","title":"7. Additional Terms.","text":"<p>\u201cAdditional permissions\u201d are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.</p> <p>When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.</p> <p>Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:</p> <p>a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \u201cfurther restrictions\u201d within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.</p> <p>If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.</p> <p>Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.</p>"},{"location":"License/#8_termination","title":"8. Termination.","text":"<p>You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).</p> <p>However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.</p> <p>Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.</p> <p>Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.</p>"},{"location":"License/#9_acceptance_not_required_for_having_copies","title":"9. Acceptance Not Required for Having Copies.","text":"<p>You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.</p>"},{"location":"License/#10_automatic_licensing_of_downstream_recipients","title":"10. Automatic Licensing of Downstream Recipients.","text":"<p>Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License.</p> <p>An \u201centity transaction\u201d is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party\u2019s predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.</p> <p>You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.</p>"},{"location":"License/#11_patents","title":"11. Patents.","text":"<p>A \u201ccontributor\u201d is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor\u2019s \u201ccontributor version\u201d.</p> <p>A contributor\u2019s \u201cessential patent claims\u201d are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \u201ccontrol\u201d includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.</p> <p>Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor\u2019s essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.</p> <p>In the following three paragraphs, a \u201cpatent license\u201d is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \u201cgrant\u201d such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.</p> <p>If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \u201cKnowingly relying\u201d means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient\u2019s use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.</p> <p>If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.</p> <p>A patent license is \u201cdiscriminatory\u201d if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.</p> <p>Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.</p>"},{"location":"License/#12_no_surrender_of_others_freedom","title":"12. No Surrender of Others\u2019 Freedom.","text":"<p>If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.</p>"},{"location":"License/#13_remote_network_interaction_use_with_the_gnu_general_public_license","title":"13. Remote Network Interaction; Use with the GNU General Public License.","text":"<p>Notwithstanding any other provision of this License, if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version by providing access to the Corresponding Source from a network server at no charge, through some standard or customary means of facilitating copying of software. This Corresponding Source shall include the Corresponding Source for any work covered by version 3 of the GNU General Public License that is incorporated pursuant to the following paragraph.</p> <p>Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the work with which it is combined will remain governed by version 3 of the GNU General Public License.</p>"},{"location":"License/#14_revised_versions_of_this_license","title":"14. Revised Versions of this License.","text":"<p>The Free Software Foundation may publish revised and/or new versions of the GNU Affero General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p> <p>Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU Affero General Public License \u201cor any later version\u201d applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU Affero General Public License, you may choose any version ever published by the Free Software Foundation.</p> <p>If the Program specifies that a proxy can decide which future versions of the GNU Affero General Public License can be used, that proxy\u2019s public statement of acceptance of a version permanently authorizes you to choose that version for the Program.</p> <p>Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.</p>"},{"location":"License/#15_disclaimer_of_warranty","title":"15. Disclaimer of Warranty.","text":"<p>THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201cAS IS\u201d WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p>"},{"location":"License/#16_limitation_of_liability","title":"16. Limitation of Liability.","text":"<p>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p>"},{"location":"License/#17_interpretation_of_sections_15_and_16","title":"17. Interpretation of Sections 15 and 16.","text":"<p>If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.</p>"},{"location":"License/#end_of_terms_and_conditions","title":"END OF TERMS AND CONDITIONS","text":"<pre><code>Copyright (C) 2024  Merkle Tree Labs\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.\n</code></pre>"},{"location":"Setup/","title":"Setup","text":""},{"location":"Setup/#requirements","title":"Requirements","text":"<ul> <li>Node v20.17.0</li> <li>nvm (recommended)</li> <li>MySQL</li> <li>Zond Node API Access (port:8454)</li> <li>QRL Node with wallet-proxy (port:5359)</li> </ul>"},{"location":"Setup/#setup","title":"Setup","text":""},{"location":"Setup/#discord_bot_setup","title":"Discord Bot Setup","text":"<ol> <li>Clone the zond-3 repository to the server that will run the bot</li> <li><code>cd zond-faucet</code> and ensure that you are using the required node version  using NVM <code>nvm use</code> <ul> <li>If you do not have <code>nvm</code> installed, make sure your node version matches the version in the <code>.nvmrc</code> file.</li> </ul> </li> <li>Install the dependencies with <code>npm install</code></li> <li>Copy the config.json.example  file to config.json and fill in the required fields. (see the definitions below)</li> <li>Install and sync a local Zond node</li> <li>Run the bot with <code>npm start</code></li> </ol>"},{"location":"Setup/#botconfig","title":"BotConfig","text":"Config Directive Default Value WhatsIt token YOU NEED A TOKEN Discord Token from the Oauth2 page clientId \u201c1213376569775620106\u201d Client ID of the bot guildId \u201c401568138317135873\u201d Guild ID from the server deployed into (This may not matter, need to look into the usage) allowedChannels \u201c401568138317135875\u201d], List of channels that the bot is allowed to use, comma separated allowedGuilds \u201cfr1t2_private\u201d], Named guilds that the bot is allowed to use faucetAddress \u201c0x20d20b8026b8f02540246f58120ddaaf35aecd9b\u201d Address of the Faucet wallet. This needs to be authorized and unlocked in the node to function Add 0x to the front of the address (Look into CLEF) faucetAddressPassword \u201cpassword\u201d faucetTimeout \u201c600\u201d Time between withdraws (in Milliseconds) maxDrip \u201c1\u201d max allowed drip for given time. (in quanta) zondPubAPI \u201c192.168.1.40:8545\u201d ond api {IP:PORT} 192.168.1.40:8454 userName \u201czond-3\u201d avatarImgLocation \u201d./discord/zond_3_Circumlunar.jpg\u201d activityString \u201cdevelopers code\u201d limited activity text string activityType \u201cWatching\u201d one of:{ Watching, Listening. Competing } statusUpdate \u201conline\u201d one of: { online, idle, dnd, invisible } apiPort 7575, the api port to run the bot services on swaggerPort 4000, the api port to run the swagger services on enableSwagger true swagger port"},{"location":"TODO/","title":"Zond Bot TODO","text":""},{"location":"TODO/#config","title":"Config","text":"<ul> <li> Rework the config functions related to guilds/channels/roles and admin users</li> </ul>"},{"location":"TODO/#general_bot_functions","title":"General Bot Functions","text":""},{"location":"TODO/#add_these_functions_to_the_bot","title":"Add these functions to the bot:","text":"<ul> <li> <p> generate ephemeral random hash (ERH)</p> <ul> <li>used to verify a user withdraw, secret key generation, or to confirm an admin function</li> <li>generate and store for verification from user/admin</li> <li>assign expiration time</li> <li>internal function not exposed directly to user!</li> </ul> </li> <li> <p>Set Known Addresses</p> <ul> <li>allow owners admin and mods to set the known addresses for exchanges etc so when a user looks it up there is a message of the known address. </li> </ul> </li> <li> <p> Set allowed Guilds <code>/set guilds enable {GUILD_ID}</code> or <code>/set guilds disable {GUILD_ID}</code></p> <ul> <li>allow bot owner to set guild by name (or id Preferred)</li> <li>add confirmation ERH to confirm with admin in DM<ul> <li>await response from admin in main chat and then delete hash, give thanks and process the command</li> </ul> </li> <li>Returns a link to add the bot to the given guild with sufficient privilege there. (Direct Message with discord developer link)</li> </ul> </li> <li> <p> Set Bot admin/privilege levels command <code>/set admin @USER</code> or <code>/set mod @USER</code> <code>/set none @USER</code> to remove</p> <ul> <li>Only bot owner defined in config can set this and should be the only one to see the command available</li> <li>add confirmation ERH to confirm with admin in DM<ul> <li>await response from admin in main chat and then delete hash, give thanks and process the command</li> </ul> </li> </ul> </li> <li> <p> Set admin privilege(s) <code>/set privilege level={none, mod, admin } {ROLE_ID}</code></p> <ul> <li>set a privilege role that should be considered admin for the bot. (should be the same as the server owners/privileged users)</li> <li>Only bot owner defined in config can set this and should be the only one to see the command available</li> <li>Set another for moderator level actions matching the mods</li> <li>another to set NONE and remove all privilege</li> <li>add confirmation ERH to confirm with admin in DM<ul> <li>await response from admin in main chat and then delete hash, give thanks and process the command</li> </ul> </li> </ul> </li> <li> <p> Set bot channels allowed <code>/set channel {CHANNEL_ID}</code></p> <ul> <li>Admin and owner can set the channels the bot is allowed. {DEFAULT to ALL}</li> <li>Applies to the guild the command is sent in.</li> <li>add confirmation ERH to confirm with admin in DM<ul> <li>await response from admin in main chat and then delete hash, give thanks and process the command</li> </ul> </li> </ul> </li> <li> <p> assign role</p> <ul> <li>sort the addition of roles that only the bot and server admin can edit.</li> <li>create a clown/bad-bot role to assign any bot that interacts</li> </ul> </li> <li> <p> admin info</p> <ul> <li> node info {QRL, ZOND}</li> <li> Wallet details</li> <li> User count</li> <li> total\u2019s for various metrics</li> <li> user details<ul> <li> balance</li> <li> last drip</li> <li> dry faucet attempts (timeout)</li> <li> withdraw addresses and list of last 10</li> <li> signup date</li> <li> OG?</li> </ul> </li> </ul> </li> <li> <p> Public Info</p> <ul> <li> Bot info<ul> <li> blocknumber</li> <li> uptime?</li> <li> ping MS</li> <li> Version</li> </ul> </li> </ul> </li> <li> <p>[ ]Help</p> <ul> <li> Give information on all commands</li> <li> provide link to further documentation</li> <li> give link to issues submission {package.json/bugs/url}</li> </ul> </li> </ul>"},{"location":"TODO/#chain_functions","title":"Chain Functions","text":""},{"location":"TODO/#qrl_chain_functions","title":"QRL Chain Functions","text":"<p>Complete: - [X] /qrl-balance     - Get balance for a given address     - Returns in either shor or quanta with flag     - [ ] Add conversion to USD (Need price data)     - [ ] Make default lookup tipbot address with no address given </p> <ul> <li> /qrl-block-by-number<ul> <li>get block by number, returns truncated data with link to explorer</li> <li>converts some message data to text but needs improvement</li> <li> Additional transaction data processing</li> </ul> </li> <li> /qrl-ots<ul> <li>Returns the next OTS key for a given address</li> </ul> </li> <li> /qrl-is-valid-address<ul> <li>Returns <code>TRUE/FALSE</code> if address is valid</li> </ul> </li> <li> /qrl-get-transaction<ul> <li>returns trunicatedc transaction details from a given <code>tx hash</code></li> <li>provides additional information with link to explorer</li> </ul> </li> <li> /qrl-add-addresses-with-slave<ul> <li></li> </ul> </li> </ul> <p>In Progress:</p> <ul> <li> GetRecoverySeeds</li> <li> GetWalletInfo</li> <li> GetTotalBalance</li> <li> RelayTransferTxnBySlave</li> <li> RelayMessageTxnBySlave</li> <li> RelayTokenTxnBySlave</li> <li> RelayTransferTokenTxnBySlave</li> <li> GetTransactionsByAddress</li> <li> GetNodeInfo</li> </ul>"},{"location":"API/api/","title":"API Documentation","text":"<p>This doc covers the API server running for the Zond Bot</p> <p>These API\u2019s are intended to seperate the node function from the client and allow multiple requests to be initated without server hangup.</p> <p>Some of the functions of the process can be labor intensive, or take some time to respond back to the client. This API serves to address this.</p>"},{"location":"API/api/#api_information","title":"API Information","text":"<p>The API is managed using <code>express</code>. </p>"},{"location":"API/api/#documentation","title":"Documentation","text":"<p>Swagger is used for documentation and testing. This is handeled directily in the code file and can be found at the swagger port on the localhost.</p> <p>The settings need to be adjusted to expose these to an outside connection and security implications need to be taken into account.</p> <p>See the Zond-bot Swagger Docs for more info on how to write and structure the swagger docs for this project.</p>"},{"location":"API/api/#api_routes","title":"API Routes","text":"<p>There are various routes defined under the <code>/src/api/routes/</code> directory following express api documentation</p> <p>We have seperated the current API into a v1 in preperation that it may change. In side of v1 is a <code>qrl</code> and <code>zond</code> directory for each chain\u2019s API route function definitions.</p> <p>These are broken into GET and POST routes. Example below.</p> <pre><code>router.get('/qrl-height', async (req, res) =&gt; {\n    try {\n        // fetch the current block height\n        const currentBlock = await height();\n        res.status(200).json({ success: true, height: currentBlock });\n    }\n    catch (error) {\n        // Handle any errors\n        console.error('Error in fetching height:', error);\n        res.status(500).json({ success: false, error: 'Failed to fetch QRL height' });\n    }\n});\n</code></pre> <p>Each of these files is imported into the server and all routes enabled.</p> <p>These routes call a script that is defined in the ./src/api/chain/* directories for now. These are seperated by chain and later there will be additional functions for things like DB lookups and such.</p>"},{"location":"API/api/#api_route_function_files","title":"API Route Function Files","text":"<p>These files define what the API does, and what it returns. The meat of the stew as it were.</p> <p>here is an example, using the QRL GetHeight function</p> <pre><code>require('module-alias/register');\n\nconst axios = require('axios');\nconst config = require('@config');\n\nasync function height() {\n    try {\n        const response = await axios.get(`http://${config.qrlPubAPI}/api/GetHeight`, {\n            jsonrpc: '2.0',\n            params: [],\n        }, {\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        });\n        return response.data;\n    }\n    catch (error)   {\n        const errorMessage = `Error occurred while fetching the QRL latest height: ${error.message}`;\n        console.error(errorMessage);\n        return new Error(errorMessage);\n    }\n}\n\nmodule.exports = { height };\n</code></pre> <p>This actually calls out to the QRL node and gets the height of the chain. With a valid response it returns the data to the axios server, then in return to the client that called it. Meanwhile the cilent has recieved a comment that the command is running, and the bot responds with thinking bubbles\u2026</p> <p>Once the API returns the data the bot updates and responds with the data. Meanwhile it is ready for other API calls and commands.</p>"},{"location":"Application/Commands/","title":"Discord Bot","text":"<p>This works through the discord bot flow and server configuration. Commands can be added following this logic.</p>"},{"location":"Application/Commands/#discordindexjs","title":"<code>discord/index.js</code>","text":"<p>The discord bot runs from the js file located at <code>src/bots/discord/index.js</code>. </p> <p>This file calls all JavaScript files located in the <code>/src/bots/discord/commands</code> directory.</p>"},{"location":"Application/Commands/#discordcommandszondjs","title":"<code>discord/commands/zond.js</code>","text":"<p>Here we find the utility directory with the zond.js file. There is a similar file for QRL commands in Discord.</p> <p>This file is a nested slash command using the discord.js SlashCommandBuilder function. This puts all of the zond functions under one slash command <code>/zond</code> in Discord.</p>"},{"location":"Application/Commands/#sub-commands","title":"Sub-commands","text":"<p>Sub-commands are located under the <code>addSubCommand</code> function</p> <pre><code>module.exports = {\n    cooldown: 3,\n    data: new SlashCommandBuilder()\n        .setName('zond')\n        .setDescription('Zond testnet info!')\n        // add sub-commands for various zond things here.\n\n        // block returns the latest block from the node\n        .addSubcommand(subcommand =&gt;\n            subcommand\n                .setName('block')\n                .setDescription('Get the current Zond block number'))\n\n    // ...\n\n    }\n</code></pre> <p>For each sub-command added to the bot, an additional module is required and must be included at the end of this file</p> <pre><code>    async execute(interaction) {\n    // ...\n        if (!allowedChannels.includes(channelId) &amp;&amp; !allowedGuilds.includes(interaction.guild.toString())) {\n            // for each channel found in the allowedChannels list, append the &lt;# and prepend &gt; to the value\n            const formattedChannels = allowedChannels.map(channel =&gt; `&lt;#${channel}&gt;\\n`);\n\n            console.log(`Ignoring command from disallowed channel: ${channelId}`);\n            return await interaction.reply({ content: `Sorry, we cant use this channel to talk...\\nPlease try again in an approved channel:\\n${formattedChannels}`, ephemeral: true });\n        }\n\n        // subcommand \"block\" entered\n        if (subCommand === 'block') {\n            const blockLookup = require('../../modules/zond/zondBlock');\n            blockLookup(interaction);\n        }\n</code></pre>"},{"location":"Application/Commands/#module_files","title":"Module files","text":"<p>Modules are located in the <code>/src/bots/discord/modules</code></p> <p>Here is the block file as an example. This file calls the API determined in the config file. This API is managed in the <code>/src/api</code> folder and is documented in the API docs</p> <pre><code>require('module-alias/register');\n\nconst axios = require('axios');\nconst { apiPort } = require('@config');\n\nasync function getBlockSub(interaction) {\n    try {\n        // Fetch the current block number from the API\n        const response = await axios.get(`http://localhost:${apiPort}/v1/zond-block`);\n        let blockNumber = 0;\n        // Return the block number\n        if (response.data.block.id === 1) {\n            blockNumber = parseInt(response.data.block.result, 16);\n            return await interaction.reply(`Latest Zond Block:\\t\\`${blockNumber}\\``);\n        }\n        else {\n            return await interaction.reply(`Cannot retrieve the BlockNumber at this time...\\n\\`${blockNumber}\\``);\n        }\n    }\n    catch (error) {\n        // Handle the error\n        const errorMessage = `Error occurred while fetching the block number: ${error.message}`;\n        console.error(errorMessage);\n        return await interaction.reply(`Looks like I'm struggling to complete that right now...\\n\\`${errorMessage}\\``);\n    }\n}\n\nmodule.exports = getBlockSub;\n</code></pre> <p>the module file calls to an API server with the endpoint identified here as /v1/zond-block. We pass the information needed for the command to the api server. </p> <p>We need to create that route and function behind it.</p> <p>see the api server documentationfor more information</p>"},{"location":"Application/Commands/#api_response_data","title":"API Response data","text":"<p>The API response data from the call will be returned to the <code>/src/bots/discord/modules/...</code> file for processing and response to the discord client.</p> <p>This is where logic and validation happens for the commands for the most part. There is ample error checks throughout the app </p> <p>Important </p> <p>Each command needs to give a response to the discord client, even if the command fails overall, send that back. If not there is an ugly error that prints to the chat.</p>"},{"location":"Database/","title":"Database Info","text":"<p>General layout of the tables in the DB.</p> Table Name Columns Purpose <code>authentication_providers</code> <code>id</code>, <code>service_id</code>, <code>auth_type_id</code>, <code>client_id</code>, <code>client_secret</code>, <code>auth_url</code>, <code>token_url</code>, <code>scopes</code>, <code>created_at</code>, <code>updated_at</code> Stores OAuth or authentication provider details <code>auth_types</code> <code>id</code>, <code>name</code> Defines different authentication types (e.g., OAuth2, API Key) <code>currencies</code> <code>code</code>, <code>name</code>, <code>symbol</code>, <code>decimals</code> Stores supported currencies and their metadata <code>future_tips</code> <code>id</code>, <code>tip_id</code>, <code>recipient_username</code>, <code>amount</code>, <code>currency_code</code>, <code>is_paid_out</code>, <code>created_at</code> Stores tips intended for users who have not yet registered <code>jwt_refresh_tokens</code> <code>id</code>, <code>user_id</code>, <code>refresh_token</code>, <code>issued_at</code>, <code>expires_at</code>, <code>revoked_at</code>, <code>created_at</code>, <code>updated_at</code> Stores JWT refresh tokens, with expiration and revocation details <code>nonces</code> <code>id</code>, <code>user_id</code>, <code>web3_wallet_id</code>, <code>nonce</code>, <code>is_used</code>, <code>created_at</code>, <code>updated_at</code> Tracks nonces for Web3 signature verifications to prevent replay <code>passwordless_tokens</code> <code>id</code>, <code>user_id</code>, <code>token</code>, <code>is_used</code>, <code>expires_at</code>, <code>created_at</code>, <code>updated_at</code> Stores tokens for passwordless login (e.g., magic links or OTP) <code>promotions</code> <code>id</code>, <code>name</code>, <code>description</code>, <code>start_date</code>, <code>end_date</code> Manages promotional events and campaigns <code>services</code> <code>id</code>, <code>name</code> Defines various services that users can connect to <code>tip_recipients</code> <code>id</code>, <code>tip_id</code>, <code>recipient_user_id</code>, <code>recipient_username</code>, <code>amount</code> Associates recipients with tips, supporting multiple recipients <code>tips</code> <code>id</code>, <code>transaction_id</code>, <code>sender_user_id</code>, <code>message</code>, <code>created_at</code> Records each tip initiated by a user <code>transaction_types</code> <code>id</code>, <code>name</code>, <code>description</code> Stores transaction types (e.g., tip, withdrawal, deposit) <code>transactions</code> <code>id</code>, <code>user_id</code>, <code>transaction_type_id</code>, <code>currency_code</code>, <code>amount</code>, <code>tx_hash</code>, <code>status</code>, <code>created_at</code>, <code>updated_at</code> Records all blockchain transactions (e.g., tips, deposits) <code>user_2fa</code> <code>id</code>, <code>user_id</code>, <code>is_2fa_enabled</code>, <code>secret_key</code>, <code>backup_codes</code>, <code>otp_verified</code>, <code>created_at</code>, <code>updated_at</code> Stores users\u2019 2FA settings, including TOTP secret and backup codes <code>user_authentications</code> <code>id</code>, <code>user_id</code>, <code>provider_id</code>, <code>provider_user_id</code>, <code>access_token</code>, <code>refresh_token</code>, <code>token_expiry</code>, <code>additional_data</code>, <code>created_at</code>, <code>updated_at</code> Associates users with their authentication methods <code>user_emails</code> <code>id</code>, <code>user_id</code>, <code>email</code>, <code>is_primary</code>, <code>is_valid</code>, <code>is_subscribed</code>, <code>validation_token</code>, <code>validated_at</code>, <code>created_at</code>, <code>updated_at</code> Stores user email addresses, primary/valid flags, and subscription <code>user_promotions</code> <code>id</code>, <code>user_id</code>, <code>promotion_id</code>, <code>is_redeemed</code>, <code>redemption_date</code> Tracks user participation in promotions <code>users</code> <code>id</code>, <code>username</code>, <code>password_hash</code>, <code>created_at</code>, <code>updated_at</code> Stores unique user information and hashed passwords <code>users_agree</code> <code>id</code>, <code>user_id</code>, <code>has_agreed</code>, <code>agreed_at</code> Tracks user agreement to terms and conditions <code>wallets</code> <code>id</code>, <code>user_id</code>, <code>currency_code</code>, <code>public_address</code>, <code>balance</code>, <code>qr_code</code>, <code>is_retired</code>, <code>retired_at</code>, <code>created_at</code>, <code>updated_at</code> Stores wallet information for users and supported currencies <code>web3_verifications</code> <code>id</code>, <code>user_id</code>, <code>web3_wallet_id</code>, <code>signature</code>, <code>message</code>, <code>verified</code>, <code>created_at</code>, <code>updated_at</code> Stores cryptographic verification of Web3 wallets <code>web3_wallets</code> <code>id</code>, <code>user_id</code>, <code>blockchain</code>, <code>public_address</code>, <code>is_primary</code>, <code>created_at</code>, <code>updated_at</code> Stores Web3 wallet information (e.g., Ethereum addresses) <code>withdrawals</code> <code>id</code>, <code>transaction_id</code>, <code>to_address</code> Logs user-initiated withdrawals to external addresses"},{"location":"Database/#installation","title":"Installation","text":"<p>See the install doc for more info on the install process</p> <p>  Database Install Docs  </p>"},{"location":"Database/#schema","title":"Schema","text":"<p>  Database Schema  </p>"},{"location":"Database/Database_Instructions/","title":"Database","text":"<p>Setup and configuration of the database is documented here.</p>"},{"location":"Database/Database_Instructions/#install","title":"Install","text":"<p>Server is installed and hardened using the guide provided here. Thanks Digital Ocean!</p>"},{"location":"Database/Database_Instructions/#user","title":"User","text":"<p>The user creation process:</p>"},{"location":"Database/Database_Instructions/#new_user","title":"New User:","text":"<p>Add a non-root user to the system we will use to interact with the bot.</p> <pre><code>CREATE USER 'sammy'@'localhost' IDENTIFIED BY 'password';\n</code></pre> <p>Add a root user as well and grant all permissions <pre><code> CREATE USER 'admin'@'localhost' IDENTIFIED BY 'password';\n\n GRANT ALL PRIVILEGES ON *.* TO 'admin'@'localhost' WITH GRANT OPTION;\n\nFLUSH PRIVILEGES;\n</code></pre></p>"},{"location":"Database/Database_Instructions/#grant_privileges","title":"Grant privileges:","text":"<pre><code>GRANT CREATE, ALTER, DROP, INSERT, UPDATE, INDEX, DELETE, SELECT, REFERENCES, RELOAD on *.* TO 'sammy'@'localhost' WITH GRANT OPTION;\n</code></pre>"},{"location":"Database/Database_Instructions/#flush_privileges","title":"FLUSH PRIVILEGES:","text":"<pre><code>FLUSH PRIVILEGES;\n</code></pre>"},{"location":"Database/Database_Instructions/#login","title":"Login","text":"<pre><code>mysql -u sammy -p\n</code></pre>"},{"location":"Database/Database_Instructions/#setup_database_tables","title":"Setup Database &amp; Tables","text":"<p>With a new user to perform a lookup or write data we need to create a database and tables.</p> <p>Using the nodeJS package <code>sequelize</code>, we will manage the creation and interaction with the bot.</p> <p>In Sequelize 6, MySQL requires the installation of the <code>mysql2</code> npm package.</p> <p>Install both the <code>mysql2</code> and <code>sequelize</code> package</p> <pre><code>npm install sequelize mysql2\n</code></pre>"},{"location":"Database/Database_Instructions/#create_database","title":"Create Database","text":"<p>There is a script for that!</p> <p>Under the scripts directory there is a database folder with some cool things</p> <p>These create and destroy the database that is defined in the config file.</p> <p><code>npm run create-db</code> gets you there.</p>"},{"location":"Database/Database_Schema/","title":"Database Schema Documentation","text":""},{"location":"Database/Database_Schema/#table_of_contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>User Management</li> <li>Users (<code>users</code>)</li> <li>User Emails (<code>user_emails</code>)</li> <li>User Settings (<code>user_settings</code>)</li> <li>User Agreements (<code>users_agree</code>)</li> <li>Authentication and Security</li> <li>Authentication Types (<code>auth_types</code>)</li> <li>Services (<code>services</code>)</li> <li>Authentication Providers (<code>authentication_providers</code>)</li> <li>User Authentications (<code>user_authentications</code>)</li> <li>Passwordless Tokens (<code>passwordless_tokens</code>)</li> <li>JWT Refresh Tokens (<code>jwt_refresh_tokens</code>)</li> <li>User Two-Factor Authentication (<code>user_2fa</code>)</li> <li>API Keys (<code>api_keys</code>)</li> <li>API Rate Limits (<code>api_rate_limits</code>)</li> <li>API Key Rotations (<code>api_key_rotations</code>)</li> <li>Security Logs (<code>security_logs</code>)</li> <li>Blockchain and Wallets</li> <li>Currencies (<code>currencies</code>)</li> <li>Wallets (<code>wallets</code>)</li> <li>Web3 Wallets (<code>web3_wallets</code>)</li> <li>Web3 Verifications (<code>web3_verifications</code>)</li> <li>Nonces (<code>nonces</code>)</li> <li>Transactions and Tips</li> <li>Transaction Types (<code>transaction_types</code>)</li> <li>Transactions (<code>transactions</code>)</li> <li>Tips (<code>tips</code>)</li> <li>Tip Recipients (<code>tip_recipients</code>)</li> <li>Withdrawals (<code>withdrawals</code>)</li> <li>Future Tips (<code>future_tips</code>)</li> <li>Promotions and Rewards</li> <li>Promotions (<code>promotions</code>)</li> <li>User Promotions (<code>user_promotions</code>)</li> <li>Guild and Role Management</li> <li>Guilds (<code>guilds</code>)</li> <li>Guild Features (<code>guild_features</code>)</li> <li>Roles (<code>roles</code>)</li> <li>Permissions (<code>permissions</code>)</li> <li>Role Permissions (<code>role_permissions</code>)</li> <li>User Roles (<code>user_roles</code>)</li> <li>Guild Roles (<code>guild_roles</code>)</li> <li>Guild Permissions (<code>guild_permissions</code>)</li> <li>Guild Mod Users (<code>guild_mod_users</code>)</li> <li>Guild Admin Users (<code>guild_admin_users</code>)</li> <li>Allowed Channels (<code>allowed_channels</code>)</li> <li>Faucet Channels (<code>faucet_channels</code>)</li> <li>Analytics and Logging</li> <li>User Analytics (<code>user_analytics</code>)</li> <li>Balance Snapshots (<code>balance_snapshots</code>)</li> <li>Data Access Logs (<code>data_access_logs</code>)</li> <li>Notifications</li> <li>Notification Types (<code>notification_types</code>)</li> <li>Notifications (<code>notifications</code>)</li> <li>User Notifications (<code>user_notifications</code>)</li> <li>User Notification Preferences (<code>user_notification_preferences</code>)</li> <li>Guild Notifications (<code>guild_notifications</code>)</li> <li>User Guild Notifications (<code>user_guild_notifications</code>)</li> <li>Guild Notification Queue (<code>guild_notification_queue</code>)</li> <li>Notes and Constraints</li> </ul>"},{"location":"Database/Database_Schema/#overview","title":"Overview","text":"<p>This document provides a comprehensive overview of the database schema, detailing each table, its purpose, and its fields. The schema is designed to support a multi-platform application with features including authentication, blockchain interactions, promotions, notifications, and more.</p>"},{"location":"Database/Database_Schema/#user_management","title":"User Management","text":""},{"location":"Database/Database_Schema/#users_users","title":"Users (<code>users</code>)","text":"<p>Stores unique user information, including a unique username used across the app for identification.</p> <pre><code>CREATE TABLE users (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL UNIQUE,\n  password_hash VARCHAR(255),\n  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique identifier for each user.</li> <li><code>username</code>: Unique username used as a universal identifier.</li> <li><code>password_hash</code>: Hashed password (if supporting direct authentication).</li> <li><code>created_at</code>: Timestamp when the user was created.</li> <li><code>updated_at</code>: Timestamp when the user was last updated.</li> </ul>"},{"location":"Database/Database_Schema/#user_emails_user_emails","title":"User Emails (<code>user_emails</code>)","text":"<p>Stores user email addresses, primary/valid flags, and subscription status</p> <pre><code>CREATE TABLE user_emails (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  user_id INT NOT NULL,\n  email VARCHAR(255) NOT NULL,\n  is_primary BOOLEAN DEFAULT FALSE,\n  is_valid BOOLEAN DEFAULT TRUE,\n  is_subscribed BOOLEAN DEFAULT FALSE, -- Opt-in for mailing lists\n  validation_token VARCHAR(255), -- Token for email validation process\n  validated_at DATETIME, -- Timestamp when the email was validated\n  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  UNIQUE KEY (user_id, email), -- Ensures each user cannot have duplicate email addresses\n  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique identifier.</li> <li><code>user_id</code>: References <code>users.id</code>.</li> <li><code>email</code>: User\u2019s email address.</li> <li><code>is_primary</code>: Indicates if this is the primary email.</li> <li><code>is_valid</code>: Indicates if the email is valid.</li> <li><code>is_subscribed</code>: User\u2019s subscription status to mailing lists.</li> <li><code>validation_token</code>: Token for email validation.</li> <li><code>validated_at</code>: Timestamp when the email was validated.</li> <li><code>created_at</code>: Timestamp when the record was created.</li> <li><code>updated_at</code>: Timestamp when the record was last updated.</li> </ul>"},{"location":"Database/Database_Schema/#user_settings_user_settings","title":"User Settings (<code>user_settings</code>)","text":"<p>Flexible key-value structure for user preferences and settings.</p> <pre><code>CREATE TABLE user_settings (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  user_id INT NOT NULL,\n  setting_key VARCHAR(50) NOT NULL, -- Name of the setting (e.g., 'theme', 'email_notifications')\n  setting_value VARCHAR(255), -- Value of the setting (e.g., 'dark', 'true', 'QRL')\n  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique identifier for each setting entry.</li> <li><code>user_id</code>: References the id from the users table, associating the setting with a specific user.</li> <li><code>setting_key</code>: The name of the preference or setting being stored (e.g., \u201ctheme\u201d for user interface preferences or \u201cnotification\u201d for notification settings).</li> <li><code>setting_value</code>: The value of the setting (e.g., \u201cdark\u201d for theme or \u201ctrue\u201d for enabling notifications).</li> </ul>"},{"location":"Database/Database_Schema/#user_agreements_users_agree","title":"User Agreements (<code>users_agree</code>)","text":"<p>Tracks user agreement to terms and conditions.</p> <pre><code>CREATE TABLE users_agree (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  user_id INT NOT NULL,\n  has_agreed BOOLEAN NOT NULL,\n  agreed_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique identifier.</li> <li><code>user_id</code>: References <code>users.id</code>.</li> <li><code>has_agreed</code>: Indicates agreement status.</li> <li><code>agreed_at</code>: Timestamp when the user agreed.</li> </ul>"},{"location":"Database/Database_Schema/#authentication_and_security","title":"Authentication and Security","text":""},{"location":"Database/Database_Schema/#authentication_types_auth_types","title":"Authentication Types (<code>auth_types</code>)","text":"<p>Defines different authentication types supported.</p> <pre><code>CREATE TABLE auth_types (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL UNIQUE\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique identifier for the authentication type.</li> <li><code>name</code>: Name of the authentication type (e.g., \u2018oauth2\u2019, \u2018api_key\u2019).</li> </ul>"},{"location":"Database/Database_Schema/#services_services","title":"Services (<code>services</code>)","text":"<p>Defines the various platforms or services that users can connect to.</p> <pre><code>CREATE TABLE services (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL UNIQUE\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique identifier for the service.</li> <li><code>name</code>: Name of the service (e.g., \u2018discord\u2019, \u2018twitter\u2019).</li> </ul>"},{"location":"Database/Database_Schema/#authentication_providers_authentication_providers","title":"Authentication Providers (<code>authentication_providers</code>)","text":"<p>Stores information about each authentication provider or method.</p> <pre><code>CREATE TABLE authentication_providers (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  service_id INT NOT NULL,\n  auth_type_id INT NOT NULL,\n  client_id VARCHAR(255),\n  client_secret VARCHAR(255),\n  auth_url VARCHAR(255),\n  token_url VARCHAR(255),\n  scopes VARCHAR(255),\n  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  FOREIGN KEY (service_id) REFERENCES services(id) ON DELETE CASCADE,\n  FOREIGN KEY (auth_type_id) REFERENCES auth_types(id)\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique identifier.</li> <li><code>service_id</code>: References <code>services.id</code>.</li> <li><code>auth_type_id</code>: References <code>auth_types.id</code>.</li> <li><code>client_id</code>: Client ID for OAuth providers.</li> <li><code>client_secret</code>: Client secret for OAuth providers.</li> <li><code>auth_url</code>: Authorization URL.</li> <li><code>token_url</code>: Token exchange URL.</li> <li><code>scopes</code>: Permissions requested.</li> <li><code>created_at</code>: Timestamp when the record was created.</li> <li><code>updated_at</code>: Timestamp when the record was last updated.</li> </ul>"},{"location":"Database/Database_Schema/#user_authentications_user_authentications","title":"User Authentications (<code>user_authentications</code>)","text":"<p>Associates users with their authentication methods.</p> <pre><code>CREATE TABLE user_authentications (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  user_id INT NOT NULL,\n  provider_id INT NOT NULL,\n  provider_user_id VARCHAR(255),\n  access_token VARCHAR(255),\n  refresh_token VARCHAR(255),\n  token_expiry DATETIME,\n  additional_data JSON,\n  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n  FOREIGN KEY (provider_id) REFERENCES authentication_providers(id)\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique identifier.</li> <li><code>user_id</code>: References <code>users.id</code>.</li> <li><code>provider_id</code>: References <code>authentication_providers.id</code>.</li> <li><code>provider_user_id</code>: User\u2019s ID on the provider\u2019s platform.</li> <li><code>access_token</code>: Access token for API calls.</li> <li><code>refresh_token</code>: Token to refresh the access token.</li> <li><code>token_expiry</code>: When the access token expires.</li> <li><code>additional_data</code>: JSON field for provider-specific data.</li> <li><code>created_at</code>: Timestamp when the record was created.</li> <li><code>updated_at</code>: Timestamp when the record was last updated.</li> </ul>"},{"location":"Database/Database_Schema/#passwordless_tokens_passwordless_tokens","title":"Passwordless Tokens (<code>passwordless_tokens</code>)","text":"<p>Stores tokens for passwordless authentication methods.</p> <pre><code>CREATE TABLE passwordless_tokens (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  user_id INT NOT NULL,\n  token VARCHAR(255) NOT NULL, -- Token sent to user for passwordless login\n  is_used BOOLEAN DEFAULT FALSE, -- Track if the token has been used\n  expires_at DATETIME NOT NULL, -- Token expiration time\n  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  UNIQUE (token),\n  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique identifier.</li> <li><code>user_id</code>: References <code>users.id</code>.</li> <li><code>token</code>: Token for passwordless login.</li> <li><code>is_used</code>: Indicates if the token has been used.</li> <li><code>expires_at</code>: Token expiration time.</li> <li><code>created_at</code>: Timestamp when the token was created.</li> <li><code>updated_at</code>: Timestamp when the record was last updated.</li> </ul>"},{"location":"Database/Database_Schema/#jwt_refresh_tokens_jwt_refresh_tokens","title":"JWT Refresh Tokens (<code>jwt_refresh_tokens</code>)","text":"<p>Stores JWT refresh tokens with expiration and revocation details.</p> <pre><code>CREATE TABLE jwt_refresh_tokens (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  user_id INT NOT NULL,\n  refresh_token VARCHAR(255) NOT NULL,\n  issued_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n  expires_at DATETIME NOT NULL, -- Token expiration time\n  revoked_at DATETIME, -- Time the token was revoked (if applicable)\n  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  UNIQUE (refresh_token),\n  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique identifier.</li> <li><code>user_id</code>: References <code>users.id</code>.</li> <li><code>refresh_token</code>: The JWT refresh token.</li> <li><code>issued_at</code>: Timestamp when the token was issued.</li> <li><code>expires_at</code>: Token expiration time.</li> <li><code>revoked_at</code>: Timestamp if the token was revoked.</li> <li><code>created_at</code>: Timestamp when the record was created.</li> <li><code>updated_at</code>: Timestamp when the record was last updated.</li> </ul>"},{"location":"Database/Database_Schema/#user_two-factor_authentication_user_2fa","title":"User Two-Factor Authentication (<code>user_2fa</code>)","text":"<p>Stores users\u2019 two-factor authentication settings.</p> <pre><code>CREATE TABLE user_2fa (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  user_id INT NOT NULL,\n  is_2fa_enabled BOOLEAN DEFAULT FALSE,\n  secret_key VARCHAR(255), -- Key for generating TOTP codes\n  backup_codes TEXT, -- Stores hashed backup codes\n  otp_verified BOOLEAN DEFAULT FALSE, -- If the OTP has been verified\n  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique identifier.</li> <li><code>user_id</code>: References <code>users.id</code>.</li> <li><code>is_2fa_enabled</code>: Indicates if 2FA is enabled.</li> <li><code>secret_key</code>: Secret key for TOTP generation.</li> <li><code>backup_codes</code>: Hashed backup codes.</li> <li><code>otp_verified</code>: Indicates if the OTP has been verified.</li> <li><code>created_at</code>: Timestamp when the record was created.</li> <li><code>updated_at</code>: Timestamp when the record was last updated.</li> </ul>"},{"location":"Database/Database_Schema/#api_keys_api_keys","title":"API Keys (<code>api_keys</code>)","text":"<p>Stores API keys for user access.</p> <pre><code>CREATE TABLE api_keys (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  user_id INT NOT NULL,\n  api_key VARCHAR(255) NOT NULL, -- The actual API key\n  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n  expires_at DATETIME NOT NULL, -- When the key expires\n  is_revoked BOOLEAN DEFAULT FALSE, -- Manual revocation flag\n  last_used_at DATETIME, -- Last time the key was used\n  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique identifier.</li> <li><code>user_id</code>: References <code>users.id</code>.</li> <li><code>api_key</code>: The API key.</li> <li><code>created_at</code>: Timestamp when the API key was created.</li> <li><code>expires_at</code>: Expiration date of the API key.</li> <li><code>is_revoked</code>: Indicates if the key has been revoked.</li> <li><code>last_used_at</code>: Timestamp of the last use.</li> </ul>"},{"location":"Database/Database_Schema/#api_rate_limits_api_rate_limits","title":"API Rate Limits (<code>api_rate_limits</code>)","text":"<p>Tracks API usage for rate limiting.</p> <pre><code>CREATE TABLE api_rate_limits (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  api_key_id INT NOT NULL,\n  request_count INT DEFAULT 0, -- Number of requests made\n  period_start DATETIME DEFAULT CURRENT_TIMESTAMP, -- Start of the rate-limit period\n  period_end DATETIME NOT NULL, -- End of the rate-limit period\n  FOREIGN KEY (api_key_id) REFERENCES api_keys(id) ON DELETE CASCADE\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique identifier.</li> <li><code>api_key_id</code>: References <code>api_keys.id</code>.</li> <li><code>request_count</code>: Number of requests made.</li> <li><code>period_start</code>: Start time of the rate limit period.</li> <li><code>period_end</code>: End time of the rate limit period.</li> </ul>"},{"location":"Database/Database_Schema/#api_key_rotations_api_key_rotations","title":"API Key Rotations (<code>api_key_rotations</code>)","text":"<p>Tracks API key rotations for security purposes.</p> <pre><code>CREATE TABLE api_key_rotations (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  old_api_key VARCHAR(255), -- Previous API key\n  new_api_key VARCHAR(255), -- Newly generated API key\n  rotated_at DATETIME DEFAULT CURRENT_TIMESTAMP, -- When rotation occurred\n  user_id INT NOT NULL,\n  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique identifier.</li> <li><code>old_api_key</code>: The old API key.</li> <li><code>new_api_key</code>: The new API key.</li> <li><code>rotated_at</code>: Timestamp when rotation occurred.</li> <li><code>user_id</code>: References <code>users.id</code>.</li> </ul>"},{"location":"Database/Database_Schema/#security_logs_security_logs","title":"Security Logs (<code>security_logs</code>)","text":"<p>Tracks security-related events.</p> <pre><code>CREATE TABLE security_logs (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  user_id INT, -- Could be NULL for system-wide events\n  event_type VARCHAR(50) NOT NULL, -- E.g., 'login_failed'\n  event_details TEXT, -- Detailed description of the event\n  event_timestamp DATETIME DEFAULT CURRENT_TIMESTAMP, -- When the event occurred\n  severity_level ENUM('low', 'medium', 'high', 'critical') DEFAULT 'low', -- Security level\n  user_ip VARCHAR(45), -- IP address involved\n  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique identifier.</li> <li><code>user_id</code>: References <code>users.id</code>.</li> <li><code>event_type</code>: Type of event.</li> <li><code>event_details</code>: Detailed event description.</li> <li><code>event_timestamp</code>: When the event occurred.</li> <li><code>severity_level</code>: Security severity level.</li> <li><code>user_ip</code>: IP address involved.</li> </ul>"},{"location":"Database/Database_Schema/#blockchain_and_wallets","title":"Blockchain and Wallets","text":""},{"location":"Database/Database_Schema/#currencies_currencies","title":"Currencies (<code>currencies</code>)","text":"<p>Stores information about supported currencies.</p> <pre><code>CREATE TABLE currencies (\n  code VARCHAR(10) PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  symbol VARCHAR(10),\n  decimals INT DEFAULT 8\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>code</code>: Currency code (e.g., \u2018QRL\u2019).</li> <li><code>name</code>: Full name of the currency.</li> <li><code>symbol</code>: Symbol used for the currency.</li> <li><code>decimals</code>: Number of decimal places.</li> </ul>"},{"location":"Database/Database_Schema/#wallets_wallets","title":"Wallets (<code>wallets</code>)","text":"<p>Stores wallet information for users and supported currencies.</p> <pre><code>CREATE TABLE wallets (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  user_id INT NOT NULL,\n  currency_code VARCHAR(10) NOT NULL,\n  public_address VARCHAR(80) NOT NULL,\n  balance DECIMAL(24,9) NOT NULL DEFAULT 0.000000000,\n  qr_code BLOB,\n  is_retired BOOLEAN DEFAULT FALSE,\n  retired_at DATETIME,\n  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  UNIQUE KEY (user_id, currency_code),\n  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n  FOREIGN KEY (currency_code) REFERENCES currencies(code)\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique identifier.</li> <li><code>user_id</code>: References <code>users.id</code>.</li> <li><code>currency_code</code>: References <code>currencies.code</code>.</li> <li><code>public_address</code>: Wallet\u2019s public address.</li> <li><code>balance</code>: Last known balance.</li> <li><code>qr_code</code>: QR code image for deposits.</li> <li><code>is_retired</code>: Indicates if the wallet is retired.</li> <li><code>retired_at</code>: Timestamp when retired.</li> <li><code>created_at</code>: Timestamp when created.</li> <li><code>updated_at</code>: Timestamp when updated.</li> </ul>"},{"location":"Database/Database_Schema/#web3_wallets_web3_wallets","title":"Web3 Wallets (<code>web3_wallets</code>)","text":"<p>Stores Web3 wallet addresses linked to users.</p> <pre><code>CREATE TABLE web3_wallets (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  user_id INT NOT NULL,\n  blockchain VARCHAR(50) NOT NULL, -- Blockchain name (e.g., 'ethereum')\n  public_address VARCHAR(42) NOT NULL, -- Web3 public address\n  is_primary BOOLEAN DEFAULT FALSE, -- Is this the primary address?\n  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  UNIQUE KEY (public_address, blockchain), -- Ensure unique address per blockchain\n  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique identifier.</li> <li><code>user_id</code>: References <code>users.id</code>.</li> <li><code>blockchain</code>: Name of the blockchain.</li> <li><code>public_address</code>: User\u2019s Web3 public address.</li> <li><code>is_primary</code>: Indicates if primary address.</li> <li><code>created_at</code>: Timestamp when linked.</li> <li><code>updated_at</code>: Timestamp when updated.</li> </ul>"},{"location":"Database/Database_Schema/#web3_verifications_web3_verifications","title":"Web3 Verifications (<code>web3_verifications</code>)","text":"<p>Stores details of Web3 verifications using cryptographic signatures.</p> <pre><code>CREATE TABLE web3_verifications (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  user_id INT NOT NULL,\n  web3_wallet_id INT NOT NULL, -- Links to web3_wallets\n  signature VARCHAR(255) NOT NULL, -- Cryptographic signature\n  message VARCHAR(255) NOT NULL, -- Message used for signing\n  verified BOOLEAN DEFAULT FALSE, -- Whether verified\n  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n  FOREIGN KEY (web3_wallet_id) REFERENCES web3_wallets(id) ON DELETE CASCADE\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique identifier.</li> <li><code>user_id</code>: References <code>users.id</code>.</li> <li><code>web3_wallet_id</code>: References <code>web3_wallets.id</code>.</li> <li><code>signature</code>: Cryptographic signature.</li> <li><code>message</code>: Message that was signed.</li> <li><code>verified</code>: Indicates if verification succeeded.</li> <li><code>created_at</code>: Timestamp when verification attempted.</li> <li><code>updated_at</code>: Timestamp when updated.</li> </ul>"},{"location":"Database/Database_Schema/#nonces_nonces","title":"Nonces (<code>nonces</code>)","text":"<p>Tracks nonces used for Web3 signature verifications.</p> <pre><code>CREATE TABLE nonces (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  user_id INT NOT NULL,\n  web3_wallet_id INT NOT NULL, -- Links to web3_wallets\n  nonce VARCHAR(255) NOT NULL, -- Unique nonce\n  is_used BOOLEAN DEFAULT FALSE, -- Whether used\n  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n  FOREIGN KEY (web3_wallet_id) REFERENCES web3_wallets(id) ON DELETE CASCADE\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique identifier.</li> <li><code>user_id</code>: References <code>users.id</code>.</li> <li><code>web3_wallet_id</code>: References <code>web3_wallets.id</code>.</li> <li><code>nonce</code>: The nonce for signing.</li> <li><code>is_used</code>: Indicates if nonce is used.</li> <li><code>created_at</code>: Timestamp when created.</li> <li><code>updated_at</code>: Timestamp when updated.</li> </ul>"},{"location":"Database/Database_Schema/#transactions_and_tips","title":"Transactions and Tips","text":""},{"location":"Database/Database_Schema/#transaction_types_transaction_types","title":"Transaction Types (<code>transaction_types</code>)","text":"<p>Defines different types of transactions.</p> <pre><code>CREATE TABLE transaction_types (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL UNIQUE,\n  description VARCHAR(255)\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique identifier.</li> <li><code>name</code>: Name of the transaction type (e.g., \u2018tip\u2019).</li> <li><code>description</code>: Description.</li> </ul> <p>Initial Data:</p> <pre><code>INSERT INTO transaction_types (name, description) VALUES\n  ('tip', 'User-to-user tip'),\n  ('withdrawal', 'Withdrawal to external address'),\n  ('deposit', 'User deposit'),\n  ('promotion_payout', 'Payout from a promotion');\n</code></pre>"},{"location":"Database/Database_Schema/#transactions_transactions","title":"Transactions (<code>transactions</code>)","text":"<p>Records all blockchain transactions.</p> <pre><code>CREATE TABLE transactions (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  user_id INT NOT NULL,\n  transaction_type_id INT NOT NULL,\n  currency_code VARCHAR(10) NOT NULL,\n  amount DECIMAL(24,9) NOT NULL CHECK (amount &gt;= 0),\n  tx_hash VARCHAR(255) UNIQUE NOT NULL,\n  status ENUM('pending', 'completed', 'failed') DEFAULT 'pending',\n  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n  FOREIGN KEY (transaction_type_id) REFERENCES transaction_types(id),\n  FOREIGN KEY (currency_code) REFERENCES currencies(code)\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique transaction identifier.</li> <li><code>user_id</code>: References <code>users.id</code>.</li> <li><code>transaction_type_id</code>: References <code>transaction_types.id</code>.</li> <li><code>currency_code</code>: References <code>currencies.code</code>.</li> <li><code>amount</code>: Transaction amount.</li> <li><code>tx_hash</code>: Unique transaction hash.</li> <li><code>status</code>: Transaction status.</li> <li><code>created_at</code>: Timestamp when created.</li> <li><code>updated_at</code>: Timestamp when updated.</li> </ul>"},{"location":"Database/Database_Schema/#tips_tips","title":"Tips (<code>tips</code>)","text":"<p>Records each tip initiated by a user.</p> <pre><code>CREATE TABLE tips (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  transaction_id INT NOT NULL,\n  sender_user_id INT NOT NULL,\n  message VARCHAR(255),\n  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n  FOREIGN KEY (transaction_id) REFERENCES transactions(id) ON DELETE CASCADE,\n  FOREIGN KEY (sender_user_id) REFERENCES users(id) ON DELETE CASCADE\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique identifier.</li> <li><code>transaction_id</code>: References <code>transactions.id</code>.</li> <li><code>sender_user_id</code>: References <code>users.id</code>.</li> <li><code>message</code>: Optional message.</li> <li><code>created_at</code>: Timestamp when tip was created.</li> </ul>"},{"location":"Database/Database_Schema/#tip_recipients_tip_recipients","title":"Tip Recipients (<code>tip_recipients</code>)","text":"<p>Associates multiple recipients with a tip.</p> <pre><code>CREATE TABLE tip_recipients (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  tip_id INT NOT NULL,\n  recipient_user_id INT,\n  recipient_username VARCHAR(50),\n  amount DECIMAL(24,9) NOT NULL CHECK (amount &gt; 0),\n  FOREIGN KEY (tip_id) REFERENCES tips(id) ON DELETE CASCADE,\n  FOREIGN KEY (recipient_user_id) REFERENCES users(id)\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique identifier.</li> <li><code>tip_id</code>: References <code>tips.id</code>.</li> <li><code>recipient_user_id</code>: References <code>users.id</code> (nullable).</li> <li><code>recipient_username</code>: Username if recipient not registered.</li> <li><code>amount</code>: Amount allocated to recipient.</li> </ul>"},{"location":"Database/Database_Schema/#withdrawals_withdrawals","title":"Withdrawals (<code>withdrawals</code>)","text":"<p>Logs user-initiated withdrawals to external addresses.</p> <pre><code>CREATE TABLE withdrawals (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  transaction_id INT NOT NULL,\n  to_address VARCHAR(80) NOT NULL,\n  FOREIGN KEY (transaction_id) REFERENCES transactions(id) ON DELETE CASCADE\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique identifier.</li> <li><code>transaction_id</code>: References <code>transactions.id</code>.</li> <li><code>to_address</code>: External address.</li> </ul>"},{"location":"Database/Database_Schema/#future_tips_future_tips","title":"Future Tips (<code>future_tips</code>)","text":"<p>Stores tips intended for users who have not yet registered.</p> <pre><code>CREATE TABLE future_tips (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  tip_id INT NOT NULL,\n  recipient_username VARCHAR(50) NOT NULL,\n  amount DECIMAL(24,9) NOT NULL CHECK (amount &gt; 0),\n  currency_code VARCHAR(10) NOT NULL,\n  is_paid_out BOOLEAN DEFAULT FALSE,\n  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n  FOREIGN KEY (tip_id) REFERENCES tips(id) ON DELETE CASCADE,\n  FOREIGN KEY (currency_code) REFERENCES currencies(code)\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique identifier.</li> <li><code>tip_id</code>: References <code>tips.id</code>.</li> <li><code>recipient_username</code>: Username of intended recipient.</li> <li><code>amount</code>: Tip amount.</li> <li><code>currency_code</code>: Currency used.</li> <li><code>is_paid_out</code>: Indicates if tip is paid out.</li> <li><code>created_at</code>: Timestamp when created.</li> </ul>"},{"location":"Database/Database_Schema/#promotions_and_rewards","title":"Promotions and Rewards","text":""},{"location":"Database/Database_Schema/#promotions_promotions","title":"Promotions (<code>promotions</code>)","text":"<p>Manages promotional events and campaigns.</p> <pre><code>CREATE TABLE promotions (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  name VARCHAR(100) NOT NULL,\n  description TEXT,\n  start_date DATETIME,\n  end_date DATETIME\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique identifier.</li> <li><code>name</code>: Name of the promotion.</li> <li><code>description</code>: Description.</li> <li><code>start_date</code>: Start date.</li> <li><code>end_date</code>: End date.</li> </ul>"},{"location":"Database/Database_Schema/#user_promotions_user_promotions","title":"User Promotions (<code>user_promotions</code>)","text":"<p>Tracks user participation in promotions.</p> <pre><code>CREATE TABLE user_promotions (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  user_id INT NOT NULL,\n  promotion_id INT NOT NULL,\n  is_redeemed BOOLEAN DEFAULT FALSE,\n  redemption_date DATETIME,\n  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n  FOREIGN KEY (promotion_id) REFERENCES promotions(id)\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique identifier.</li> <li><code>user_id</code>: References <code>users.id</code>.</li> <li><code>promotion_id</code>: References <code>promotions.id</code>.</li> <li><code>is_redeemed</code>: Indicates if redeemed.</li> <li><code>redemption_date</code>: When redeemed.</li> </ul>"},{"location":"Database/Database_Schema/#guild_promotions_guild_promotions","title":"Guild Promotions (<code>guild_promotions</code>)","text":"<p>Guild Promotions Table: This table will store the core promotion details for each guild.</p> <p><pre><code>CREATE TABLE guild_promotions (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  guild_id BIGINT NOT NULL, -- References guilds\n  name VARCHAR(100) NOT NULL, -- Promotion name\n  description TEXT, -- Details of the promotion\n  start_date DATETIME, -- Start time of the promotion\n  end_date DATETIME, -- End time of the promotion\n  reward_type ENUM('tokens', 'tips', 'access') NOT NULL, -- Type of reward\n  reward_amount DECIMAL(24,9) DEFAULT NULL, -- Optional: Amount of tokens or tips as reward\n  is_active BOOLEAN DEFAULT TRUE, -- Whether the promotion is currently active\n  created_by BIGINT NOT NULL, -- ID of admin/mod who created the promotion\n  created_at DATETIME DEFAULT CURRENT_TIMESTAMP, -- Timestamp when the promotion was created\n  FOREIGN KEY (guild_id) REFERENCES guilds(guild_id) ON DELETE CASCADE,\n  FOREIGN KEY (created_by) REFERENCES guild_admin_users(user_id)\n);\n</code></pre> Fields:</p> <ul> <li><code>id</code>: Unique identifier for each promotion.</li> <li><code>guild_id</code>: The guild where the promotion is hosted.</li> <li><code>name</code>: The name of the promotion.</li> <li><code>description</code>: Full description and terms.</li> <li><code>start_date</code>: When the promotion begins.</li> <li><code>end_date</code>: When the promotion ends.</li> <li><code>reward_type</code>: The type of reward (tokens, tips, special access, etc.).</li> <li><code>reward_amount</code>: Amount of reward (if applicable, for tips or tokens).</li> <li><code>is_active</code>: Indicates if the promotion is currently running.</li> <li><code>created_by</code>: The admin or moderator who created the promotion.</li> <li><code>created_at</code>: Timestamp when the promotion was created.</li> </ul>"},{"location":"Database/Database_Schema/#guild_promotion_participation_table","title":"Guild Promotion Participation Table","text":"<p>Track each user\u2019s interaction with a guild-specific promotion (e.g., whether they have signed up, redeemed, or referred others).</p> <pre><code>CREATE TABLE guild_promotion_participants (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  promotion_id INT NOT NULL, -- References guild_promotions\n  user_id INT NOT NULL, -- References users\n  referral_code VARCHAR(50), -- Optional: Referral code used\n  is_redeemed BOOLEAN DEFAULT FALSE, -- Whether the user has redeemed the reward\n  redemption_date DATETIME, -- When the reward was redeemed\n  points_earned INT DEFAULT 0, -- Optional: Points or scores earned\n  created_at DATETIME DEFAULT CURRENT_TIMESTAMP, -- Timestamp of user participation\n  FOREIGN KEY (promotion_id) REFERENCES guild_promotions(id) ON DELETE CASCADE,\n  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n);\n</code></pre> <ul> <li><code>id</code>: Unique identifier for each participant.</li> <li><code>promotion_id</code>: The promotion in which the user is participating.</li> <li><code>user_id</code>: The user participating in the promotion.</li> <li><code>referral_code</code>: Optional referral code used for joining.</li> <li><code>is_redeemed</code>: Whether the user has claimed the reward.</li> <li><code>redemption_date</code>: Timestamp of reward redemption.</li> <li><code>points_earned</code>: Any points or metrics tracked during the promotion.</li> <li><code>created_at</code>: When the user signed up for the promotion.</li> </ul>"},{"location":"Database/Database_Schema/#guild_promotions_rewards_table_guild_promotion_rewards","title":"Guild Promotions Rewards Table (<code>guild_promotion_rewards</code>)","text":"<p>If promotions offer different types of rewards based on criteria (e.g., milestones, achievements), this table can store those reward tiers.</p> <pre><code>CREATE TABLE guild_promotion_rewards (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  promotion_id INT NOT NULL, -- References guild_promotions\n  reward_type ENUM('tokens', 'tips', 'access') NOT NULL, -- Type of reward\n  reward_amount DECIMAL(24,9) DEFAULT NULL, -- Amount of reward (if applicable)\n  milestone VARCHAR(50), -- Optional milestone for earning the reward (e.g., '10 referrals')\n  FOREIGN KEY (promotion_id) REFERENCES guild_promotions(id) ON DELETE CASCADE\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique identifier for each reward.</li> <li><code>promotion_id</code>: The promotion this reward is linked to.</li> <li><code>reward_type</code>: The type of reward.</li> <li><code>reward_amount</code>: The value or amount of the reward.</li> <li><code>milestone</code>: Optional milestone criteria for earning the reward.</li> </ul>"},{"location":"Database/Database_Schema/#guild_and_role_management","title":"Guild and Role Management","text":""},{"location":"Database/Database_Schema/#guilds_guilds","title":"Guilds (<code>guilds</code>)","text":"<p>Stores core guild (e.g., Discord server) information.</p> <pre><code>CREATE TABLE guilds (\n  guild_id BIGINT PRIMARY KEY,\n  is_allowed BOOLEAN DEFAULT FALSE,\n  announcement_channel BIGINT,\n  mod_channel BIGINT,\n  command_prefix VARCHAR(5) DEFAULT '!',\n  allow_all_channels BOOLEAN DEFAULT FALSE, -- Indicates if all channels are allowed\n  bot_join_date DATETIME DEFAULT CURRENT_TIMESTAMP\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>guild_id</code>: Unique identifier.</li> <li><code>is_allowed</code>: Indicates if the bot is allowed in the guild.</li> <li><code>announcement_channel</code>: Channel ID for announcements.</li> <li><code>mod_channel</code>: Channel ID for moderators.</li> <li><code>command_prefix</code>: Command prefix.</li> <li><code>allow_all_channels</code>: If all channels are allowed.</li> <li><code>bot_join_date</code>: When the bot joined.</li> </ul>"},{"location":"Database/Database_Schema/#guild_features_guild_features","title":"Guild Features (<code>guild_features</code>)","text":"<p>Stores feature toggles for each guild.</p> <pre><code>CREATE TABLE guild_features (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  guild_id BIGINT NOT NULL,\n  feature_name VARCHAR(50),\n  is_enabled BOOLEAN DEFAULT TRUE,\n  FOREIGN KEY (guild_id) REFERENCES guilds(guild_id) ON DELETE CASCADE\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique identifier.</li> <li><code>guild_id</code>: References <code>guilds.guild_id</code>.</li> <li><code>feature_name</code>: Name of the feature.</li> <li><code>is_enabled</code>: Indicates if enabled.</li> </ul>"},{"location":"Database/Database_Schema/#roles_roles","title":"Roles (<code>roles</code>)","text":"<p>Defines global roles.</p> <pre><code>CREATE TABLE roles (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  role_name VARCHAR(50) NOT NULL UNIQUE,\n  description VARCHAR(255)\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique identifier.</li> <li><code>role_name</code>: Name of the role.</li> <li><code>description</code>: Description.</li> </ul>"},{"location":"Database/Database_Schema/#permissions_permissions","title":"Permissions (<code>permissions</code>)","text":"<p>Defines global permissions.</p> <pre><code>CREATE TABLE permissions (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  permission_name VARCHAR(50) NOT NULL UNIQUE,\n  description VARCHAR(255)\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique identifier.</li> <li><code>permission_name</code>: Name of the permission.</li> <li><code>description</code>: Description.</li> </ul>"},{"location":"Database/Database_Schema/#role_permissions_role_permissions","title":"Role Permissions (<code>role_permissions</code>)","text":"<p>Associates roles with permissions.</p> <pre><code>CREATE TABLE role_permissions (\n  role_id INT NOT NULL,\n  permission_id INT NOT NULL,\n  PRIMARY KEY (role_id, permission_id),\n  FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE CASCADE,\n  FOREIGN KEY (permission_id) REFERENCES permissions(id) ON DELETE CASCADE\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>role_id</code>: References <code>roles.id</code>.</li> <li><code>permission_id</code>: References <code>permissions.id</code>.</li> </ul>"},{"location":"Database/Database_Schema/#user_roles_user_roles","title":"User Roles (<code>user_roles</code>)","text":"<p>Associates users with roles for permission management.</p> <pre><code>CREATE TABLE user_roles (\n  user_id INT NOT NULL,\n  role_id INT NOT NULL,\n  PRIMARY KEY (user_id, role_id),\n  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n  FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE CASCADE\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>user_id</code>: References <code>users.id</code>.</li> <li><code>role_id</code>: References <code>roles.id</code>.</li> </ul>"},{"location":"Database/Database_Schema/#guild_roles_guild_roles","title":"Guild Roles (<code>guild_roles</code>)","text":"<p>Links guilds with global roles.</p> <pre><code>CREATE TABLE guild_roles (\n  guild_id BIGINT NOT NULL,\n  role_id INT NOT NULL,  -- Links to global 'roles' table\n  mod_role BIGINT,\n  admin_role BIGINT,\n  PRIMARY KEY (guild_id, role_id),\n  FOREIGN KEY (guild_id) REFERENCES guilds(guild_id) ON DELETE CASCADE,\n  FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE CASCADE\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>guild_id</code>: References <code>guilds.guild_id</code>.</li> <li><code>role_id</code>: References <code>roles.id</code>.</li> <li><code>mod_role</code>: Guild-specific moderator role ID.</li> <li><code>admin_role</code>: Guild-specific admin role ID.</li> </ul>"},{"location":"Database/Database_Schema/#guild_permissions_guild_permissions","title":"Guild Permissions (<code>guild_permissions</code>)","text":"<p>Guild-specific permissions for roles.</p> <pre><code>CREATE TABLE guild_permissions (\n  guild_id BIGINT NOT NULL,\n  role_id INT NOT NULL,\n  permission_id INT NOT NULL,\n  PRIMARY KEY (guild_id, role_id, permission_id),\n  FOREIGN KEY (guild_id) REFERENCES guilds(guild_id) ON DELETE CASCADE,\n  FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE CASCADE,\n  FOREIGN KEY (permission_id) REFERENCES permissions(id) ON DELETE CASCADE\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>guild_id</code>: References <code>guilds.guild_id</code>.</li> <li><code>role_id</code>: References <code>roles.id</code>.</li> <li><code>permission_id</code>: References <code>permissions.id</code>.</li> </ul>"},{"location":"Database/Database_Schema/#guild_mod_users_guild_mod_users","title":"Guild Mod Users (<code>guild_mod_users</code>)","text":"<p>Associates guilds with moderator users.</p> <pre><code>CREATE TABLE guild_mod_users (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  guild_id BIGINT NOT NULL,\n  user_id BIGINT NOT NULL,\n  FOREIGN KEY (guild_id) REFERENCES guilds(guild_id) ON DELETE CASCADE\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique identifier.</li> <li><code>guild_id</code>: References <code>guilds.guild_id</code>.</li> <li><code>user_id</code>: User ID of the moderator.</li> </ul>"},{"location":"Database/Database_Schema/#guild_admin_users_guild_admin_users","title":"Guild Admin Users (<code>guild_admin_users</code>)","text":"<p>Associates guilds with admin users.</p> <pre><code>CREATE TABLE guild_admin_users (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  guild_id BIGINT NOT NULL,\n  user_id BIGINT NOT NULL,\n  FOREIGN KEY (guild_id) REFERENCES guilds(guild_id) ON DELETE CASCADE\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique identifier.</li> <li><code>guild_id</code>: References <code>guilds.guild_id</code>.</li> <li><code>user_id</code>: User ID of the admin.</li> </ul>"},{"location":"Database/Database_Schema/#allowed_channels_allowed_channels","title":"Allowed Channels (<code>allowed_channels</code>)","text":"<p>Stores allowed channels for bot interaction.</p> <pre><code>CREATE TABLE allowed_channels (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  guild_id BIGINT NOT NULL,\n  channel_id BIGINT NOT NULL,\n  FOREIGN KEY (guild_id) REFERENCES guilds(guild_id) ON DELETE CASCADE\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique identifier.</li> <li><code>guild_id</code>: References <code>guilds.guild_id</code>.</li> <li><code>channel_id</code>: Channel ID allowed.</li> </ul>"},{"location":"Database/Database_Schema/#faucet_channels_faucet_channels","title":"Faucet Channels (<code>faucet_channels</code>)","text":"<p>Stores faucet-specific channels.</p> <pre><code>CREATE TABLE faucet_channels (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  guild_id BIGINT NOT NULL,\n  channel_id BIGINT NOT NULL,\n  FOREIGN KEY (guild_id) REFERENCES guilds(guild_id) ON DELETE CASCADE\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique identifier.</li> <li><code>guild_id</code>: References <code>guilds.guild_id</code>.</li> <li><code>channel_id</code>: Faucet channel ID.</li> </ul>"},{"location":"Database/Database_Schema/#analytics_and_logging","title":"Analytics and Logging","text":""},{"location":"Database/Database_Schema/#user_analytics_user_analytics","title":"User Analytics (<code>user_analytics</code>)","text":"<p>Tracks detailed user interactions for analytics.</p> <pre><code>CREATE TABLE user_analytics (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  user_id INT NOT NULL,\n  action VARCHAR(50) NOT NULL, -- Action performed\n  transaction_size DECIMAL(24,9) DEFAULT NULL, -- Size if applicable\n  faucet_request_count INT DEFAULT 0, -- Number of faucet requests\n  tip_count INT DEFAULT 0, -- Number of tips given\n  response_time_ms INT NOT NULL, -- Time taken to process action\n  action_timestamp DATETIME DEFAULT CURRENT_TIMESTAMP, -- When action occurred\n  user_ip VARCHAR(45), -- IP address\n  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique identifier.</li> <li><code>user_id</code>: References <code>users.id</code>.</li> <li><code>action</code>: Action performed.</li> <li><code>transaction_size</code>: Size if applicable.</li> <li><code>faucet_request_count</code>: Number of faucet requests.</li> <li><code>tip_count</code>: Number of tips given.</li> <li><code>response_time_ms</code>: Processing time.</li> <li><code>action_timestamp</code>: When occurred.</li> <li><code>user_ip</code>: IP address.</li> </ul>"},{"location":"Database/Database_Schema/#balance_snapshots_balance_snapshots","title":"Balance Snapshots (<code>balance_snapshots</code>)","text":"<p>Captures user balances at different intervals.</p> <pre><code>CREATE TABLE balance_snapshots (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  user_id INT NOT NULL,\n  currency_code VARCHAR(10) NOT NULL, -- Currency code\n  balance DECIMAL(24,9) NOT NULL, -- User balance\n  snapshot_time DATETIME DEFAULT CURRENT_TIMESTAMP, -- When snapshot taken\n  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n  FOREIGN KEY (currency_code) REFERENCES currencies(code)\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique identifier.</li> <li><code>user_id</code>: References <code>users.id</code>.</li> <li><code>currency_code</code>: References <code>currencies.code</code>.</li> <li><code>balance</code>: User balance.</li> <li><code>snapshot_time</code>: When snapshot taken.</li> </ul>"},{"location":"Database/Database_Schema/#data_access_logs_data_access_logs","title":"Data Access Logs (<code>data_access_logs</code>)","text":"<p>Logs data export or deletion requests for GDPR compliance.</p> <pre><code>CREATE TABLE data_access_logs (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  user_id INT NOT NULL,\n  access_type ENUM('data_export', 'data_deletion') NOT NULL, -- Type of request\n  request_timestamp DATETIME DEFAULT CURRENT_TIMESTAMP, -- When requested\n  completed_timestamp DATETIME, -- When fulfilled\n  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique identifier.</li> <li><code>user_id</code>: References <code>users.id</code>.</li> <li><code>access_type</code>: Type of GDPR request.</li> <li><code>request_timestamp</code>: When requested.</li> <li><code>completed_timestamp</code>: When fulfilled.</li> </ul>"},{"location":"Database/Database_Schema/#notifications","title":"Notifications","text":""},{"location":"Database/Database_Schema/#notification_types_notification_types","title":"Notification Types (<code>notification_types</code>)","text":"<p>Categorizes different notifications.</p> <pre><code>CREATE TABLE notification_types (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  type_name VARCHAR(50) NOT NULL, -- Type of notification\n  description VARCHAR(255)\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique identifier.</li> <li><code>type_name</code>: Notification type name.</li> <li><code>description</code>: Description.</li> </ul>"},{"location":"Database/Database_Schema/#notifications_notifications","title":"Notifications (<code>notifications</code>)","text":"<p>Stores global or non-guild-specific notifications.</p> <pre><code>CREATE TABLE notifications (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  type_id INT NOT NULL, -- References notification_types\n  content TEXT NOT NULL, -- Notification content\n  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n  FOREIGN KEY (type_id) REFERENCES notification_types(id) ON DELETE CASCADE\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique identifier.</li> <li><code>type_id</code>: References <code>notification_types.id</code>.</li> <li><code>content</code>: Notification content.</li> <li><code>created_at</code>: Timestamp when created.</li> </ul>"},{"location":"Database/Database_Schema/#user_notifications_user_notifications","title":"User Notifications (<code>user_notifications</code>)","text":"<p>Stores notifications specific to each user, allowing the application to track whether a notification has been delivered and read by the user. Useful for features like alerts, announcements, and reminders.</p> <pre><code>CREATE TABLE user_notifications (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  user_id INT NOT NULL, -- References users.id to associate the notification with a specific user\n  notification_id INT NOT NULL, -- References notifications.id for the actual notification content\n  is_read BOOLEAN DEFAULT FALSE, -- Tracks whether the user has opened/read the notification\n  delivered_at DATETIME, -- Timestamp of when the notification was delivered to the user\n  read_at DATETIME, -- Timestamp of when the notification was read (if applicable)\n  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n  FOREIGN KEY (notification_id) REFERENCES notifications(id) ON DELETE CASCADE\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique identifier for the notification record.</li> <li><code>user_id</code>: References the user who received the notification, ensuring notifications are user-specific.</li> <li><code>notification_id</code>: References the notifications.id table, linking to the actual notification content (message, type).</li> <li><code>is_read</code>: Indicates whether the user has opened/read the notification (false by default).</li> <li><code>delivered_at</code>: The timestamp indicating when the notification was delivered to the user.</li> <li><code>read_at</code>: The timestamp indicating when the user read the notification, if applicable.</li> </ul>"},{"location":"Database/Database_Schema/#user_notification_preferences_user_notification_preferences","title":"User Notification Preferences (<code>user_notification_preferences</code>)","text":"<p>Stores user preferences for receiving notifications.</p> <pre><code>CREATE TABLE user_notification_preferences (\n  user_id INT NOT NULL, -- References users.id\n  notify_by_email BOOLEAN DEFAULT TRUE,\n  notify_by_sms BOOLEAN DEFAULT FALSE,\n  notify_in_app BOOLEAN DEFAULT TRUE,\n  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>user_id</code>: References <code>users.id</code>.</li> <li><code>notify_by_email</code>: Email notifications.</li> <li><code>notify_by_sms</code>: SMS notifications.</li> <li><code>notify_in_app</code>: In-app notifications.</li> </ul>"},{"location":"Database/Database_Schema/#guild_notifications_guild_notifications","title":"Guild Notifications (<code>guild_notifications</code>)","text":"<p>Guild-specific notifications.</p> <pre><code>CREATE TABLE guild_notifications (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  guild_id BIGINT NOT NULL, -- References guilds\n  type_id INT NOT NULL, -- References notification_types\n  content TEXT NOT NULL, -- Notification content\n  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n  created_by BIGINT NOT NULL, -- User ID of creator\n  FOREIGN KEY (guild_id) REFERENCES guilds(guild_id) ON DELETE CASCADE,\n  FOREIGN KEY (type_id) REFERENCES notification_types(id) ON DELETE CASCADE\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique identifier.</li> <li><code>guild_id</code>: References <code>guilds.guild_id</code>.</li> <li><code>type_id</code>: References <code>notification_types.id</code>.</li> <li><code>content</code>: Notification content.</li> <li><code>created_at</code>: Timestamp when created.</li> <li><code>created_by</code>: User ID of creator.</li> </ul>"},{"location":"Database/Database_Schema/#user_guild_notifications_user_guild_notifications","title":"User Guild Notifications (<code>user_guild_notifications</code>)","text":"<p>Maps guild notifications to users.</p> <pre><code>CREATE TABLE user_guild_notifications (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  guild_notification_id INT NOT NULL, -- References guild_notifications\n  user_id INT NOT NULL, -- References users.id\n  is_read BOOLEAN DEFAULT FALSE,\n  delivered_at DATETIME,\n  read_at DATETIME,\n  FOREIGN KEY (guild_notification_id) REFERENCES guild_notifications(id) ON DELETE CASCADE,\n  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique identifier.</li> <li><code>guild_notification_id</code>: References <code>guild_notifications.id</code>.</li> <li><code>user_id</code>: References <code>users.id</code>.</li> <li><code>is_read</code>: Indicates if read.</li> <li><code>delivered_at</code>: When delivered.</li> <li><code>read_at</code>: When read.</li> </ul>"},{"location":"Database/Database_Schema/#guild_notification_queue_guild_notification_queue","title":"Guild Notification Queue (<code>guild_notification_queue</code>)","text":"<p>Queue for scheduling guild notifications.</p> <pre><code>CREATE TABLE guild_notification_queue (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  guild_notification_id INT NOT NULL, -- References guild_notifications\n  scheduled_for DATETIME NOT NULL, -- When to deliver\n  status ENUM('pending', 'sent', 'failed') DEFAULT 'pending',\n  attempts INT DEFAULT 0,\n  FOREIGN KEY (guild_notification_id) REFERENCES guild_notifications(id) ON DELETE CASCADE\n);\n</code></pre> <p>Fields:</p> <ul> <li><code>id</code>: Unique identifier.</li> <li><code>guild_notification_id</code>: References <code>guild_notifications.id</code>.</li> <li><code>scheduled_for</code>: Scheduled delivery time.</li> <li><code>status</code>: Delivery status.</li> <li><code>attempts</code>: Number of attempts.</li> </ul>"},{"location":"Database/Database_Schema/#notes_and_constraints","title":"Notes and Constraints","text":"<ul> <li>Foreign Keys: All foreign keys are defined with <code>ON DELETE CASCADE</code> to ensure referential integrity and automatically remove related records when a user or related entity is deleted.</li> <li>Unique Constraints: Applied where necessary to prevent duplicate entries (e.g., unique usernames, one wallet per user per currency).</li> <li>Data Types: Appropriate data types are used for fields, such as <code>DECIMAL(24,9)</code> for amounts to handle cryptocurrencies with high precision.</li> <li>Timestamp Fields: Standardized timestamp fields (<code>created_at</code>, <code>updated_at</code>, etc.) are used across tables for consistency.</li> <li>Indexes: Implicitly created by primary keys and unique constraints. Additional indexes can be added on frequently queried fields for performance optimization.</li> </ul> <p>Note: The <code>discord_link</code> and <code>faucet_payouts</code> tables have been omitted because account linking is handled through the <code>authentication_providers</code> and <code>user_authentications</code> tables, and faucet payouts are recorded in the <code>transactions</code> table with the appropriate <code>transaction_type_id</code>.</p>"},{"location":"Install/Discord/","title":"Discord Setup","text":"<p>The system requires that a discord bot is created to interact with the API over at discord.</p> <p>Discord Developers</p> <p>The admin dashboard can be found at: discord.com/developers/applications</p>"},{"location":"Install/Discord/#new_bot","title":"New Bot","text":"<p>Create  a new bot in the dashboard and browse to the General Information page.</p>"},{"location":"Install/Discord/#general_information","title":"General Information","text":"<p>Collect the following: - Application ID: 1289030581098643486 - Public Key: 558efb89d293227a23e0330d353974d4d1c725d7cffed5a66db95e4093215fc8</p> <p>Configure the name and other details for the bot in this page including image</p>"},{"location":"Install/Discord/#bots_tab","title":"Bots Tab","text":"<p>On the Bots tab, enable all of the privileged gateway intents.</p> <p></p>"},{"location":"Install/Discord/#oauth2_tab","title":"Oauth2 Tab","text":"<p>This will house the information that Oauth2 flow will use including keys and redirects as defined here</p>"},{"location":"Install/Nodes/","title":"Nodes Required To Run The Bot","text":""},{"location":"Install/Nodes/#qrl","title":"QRL","text":"<p>The QRL node must be accessible to the bot on port <code>5359</code>. This allows access to the walletd and walletd-grpc proxy, making unlimited addresses and simplifying the process of calling functions without protobuffs and grpc.</p> <p>This requires three things to function correctly</p> <ol> <li>QRL Node running and synced</li> <li>The walletd daemon started on the node</li> <li>the golang project downloaded and built on the node server (see the docs)</li> </ol> <p>With these loaded the QRL node is complete.</p> <p>The qrl bot wallet will be located in the default QRL directory <code>~/.qrl/</code> Protect it and do not loose the private keys!</p> <p>side note this file must be loaded before the walletd is started.</p> <p>Stop both the <code>qrl-walletd</code> and the <code>wallet_grpc_proxy</code> if you make any changes or restore the wallet file </p>"},{"location":"Install/Nodes/#zond_node","title":"Zond Node","text":"<p>The zond node is ran in two parts, the validator (qrysm) and the consensus engine (gzond)</p>"},{"location":"Install/Nodes/#gzond","title":"gzond","text":"<pre><code>/home/fr1t2/zond/gzond --nat=extip:0.0.0.0 \\\n                        --betanet \\\n                        --http \\\n                        --http.port 8545 \\\n                        --http.addr 192.168.1.40 \\\n                        --http.api \"web3,net,personal,zond,engine,debug\" \\\n                        --datadir=/home/fr1t2/zond/gzonddata \\\n                        --syncmode=full \\\n                        --allow-insecure-unlock \\\n                        --password \"/home/fr1t2/zond/passwords.txt\" \\\n                        --unlock=\"0x20d20b8026b8f02540246f58120ddaaf35aecd9b\" \\\n                        --snapshot=false \\\n                        --password \"/home/fr1t2/zond/passwords.txt\" \\\n                        --gcmode=archive\n</code></pre> <p>With clef enabled</p> <pre><code>./gzond --nat=extip:0.0.0.0 --betanet --http --http.api \"web3,net,personal,zond,engine, debug\" --datadir=gzonddata console --syncmode=full --snapshot=false  --gcmode=archive --signer=gzonddata/clef.ipc\n</code></pre> <p>Address must be imported and allowed insecure-unlock. Also the password file must contain the password that was used to setup during the import.</p> <pre><code>./gzond account import --datadir /some-dir ./keyfile\n</code></pre>"},{"location":"Install/Nodes/#beacon","title":"Beacon","text":"<p>Check the docs for the latest version of this file.</p> <pre><code>/home/fr1t2/zond/beacon-chain \\\n        --datadir=/home/fr1t2/zond/beacondata \\\n        --min-sync-peers=1 \\\n        --genesis-state=/home/fr1t2/zond/genesis.ssz \\\n        --chain-config-file=/home/fr1t2/zond/config.yml \\\n        --config-file=/home/fr1t2/zond/config.yml \\\n        --chain-id=32382 \\\n        --execution-endpoint=http://localhost:8551 \\\n        --accept-terms-of-use \\\n        --jwt-secret=/home/fr1t2/zond/gzonddata/gzond/jwtsecret \\\n        --contract-deployment-block=0 \\\n        --minimum-peers-per-subnet=0 \\\n        --p2p-static-id \\\n        --bootstrap-node \"enr:-MK4QB1-CQAEPXFwD0D_tS08YXWPsKuaWdCzentML2JhAJnvXUR4lSPHCRXHCjudviKciwBmbPirHjyL_kmI0T1ti6qGAY0sF6hgh2F0dG5ldHOIAAAAAAAAAACEZXRoMpDeYa1-IAAAk___________gmlkgnY0gmlwhC1MJ0KJc2VjcDI1NmsxoQN_5eo8D8pFGWUX1SMAT7kMbY2a9Ryb6Bu2oAW8s28kyYhzeW5jbmV0cwCDdGNwgjLIg3VkcIIu4A\" \\\n        --bootstrap-node \"enr:-MK4QOiaZeOWRnUyxfJv0lTbvjh-Re4zfDBW7vNWl9wIW7n8OWzMmxhy8IVHgRF7QZrkm7OGShDogEYUtdg8Bt1nIqaGAY0sFwP7h2F0dG5ldHOIAAAAAAAAAACEZXRoMpDeYa1-IAAAk___________gmlkgnY0gmlwhC0g6p2Jc2VjcDI1NmsxoQK6I2IsSSRwnOtpsnzhgACTRfYZqUQ1aTsw-K4qMR_2BohzeW5jbmV0cwCDdGNwgjLIg3VkcIIu4A\"\n</code></pre>"},{"location":"Install/Requirements/","title":"Requirements","text":"<p>Below is a list of the requirements to run the bot on hardware (virtual or other)</p> <p>THIS IS ONLY A TESTING SERVER</p> <p>Additional hardware requirements will be needed for the mainnet version.</p> <p>Further information is needed to confirm the final requirements</p>"},{"location":"Install/Requirements/#minimum_hardware_requirements","title":"Minimum Hardware Requirements","text":"<ul> <li>Server: <ul> <li>8Gb RAM</li> <li>4CPU core</li> <li>180Gb NVMe (OS and internal storage)</li> <li>80Gb NVMe (Zond)</li> <li>120Gb HDD (QRL)</li> </ul> </li> </ul> <p>Due to the large size of the Zond node running in Archive mode there are some serious needs for the hardware. There are large RAM and CPU tasks as well as additional Drive space required. </p> <p>The archive node will store all data from each transaction, block and validation that has happened from genesis.</p> <p>Additional tasks on the server will come from the QRL node generating addresses and signing transactions into the network for users.</p>"},{"location":"Install/Server-Setup/","title":"Server Setup","text":"<p>Install and configure the system to run the bot.</p> <ol> <li>Add new user to run the bot:<ol> <li> <code>adduser fr1t2</code></li> <li> <code>adduser fr1t2 sudo</code></li> </ol> </li> <li>Secure SSH to only key based login:<ol> <li> Modify the <code>/etc/sshd_conf</code> file to disallow password and root login. Ensure keys are in place and functional.</li> </ol> </li> <li> <p>Enable UFW firewall rules:</p> <ol> <li> Rules are defined below <pre><code>[ 1] 22/tcp                     ALLOW IN    Anywhere\n[ 2] OpenSSH                    ALLOW IN    Anywhere\n[ 3] 19000                      ALLOW IN    Anywhere\n[ 4] 30303/tcp                  ALLOW IN    Anywhere\n[ 5] 30303/udp                  ALLOW IN    Anywhere\n[ 6] 22/tcp (v6)                ALLOW IN    Anywhere (v6)\n[ 7] OpenSSH (v6)               ALLOW IN    Anywhere (v6)\n[ 8] 19000 (v6)                 ALLOW IN    Anywhere (v6)\n[ 9] 30303/tcp (v6)             ALLOW IN    Anywhere (v6)\n[10] 30303/udp (v6)             ALLOW IN    Anywhere (v6)\n</code></pre></li> </ol> </li> <li> <p>Fail2ban:</p> <ol> <li> Install <code>fail2ban</code> with <code>sudo apt install fail2ban</code></li> <li> Copy the config file and edit to enable the SSHD protection using UFW</li> <li> Enable fail2ban in <code>systemd</code></li> </ol> </li> <li> <p>Mount QRL and ZOND Block storage to server and mount the block device. </p> <ol> <li> <p> Create directory and mount in <code>/etc/fstab</code> for each drive/chain</p> <pre><code>echo /dev/vdb1               /home/fr1t2/ZOND       ext4    defaults,noatime,nofail 0 0 &gt;&gt; /etc/fstab\n\necho /dev/vdc1               /home/fr1t2/QRL       ext4    defaults,noatime,nofail 0 0 &gt;&gt; /etc/fstab\n</code></pre> </li> </ol> </li> <li> <p>update and upgrade the system</p> <ol> <li> <code>sudo apt update &amp;&amp; sudo apt upgrade</code></li> </ol> </li> <li>Install all required packages for the application<ol> <li> MySQL</li> <li> NVM and NodeJS latest</li> <li> git, screen, \u2026</li> </ol> </li> </ol> <p>Add all required packages!</p> <p>This list is not complete\u2026</p>"},{"location":"QRL/QRL-Node/","title":"QRL Node","text":""},{"location":"QRL/QRL-Node/#qrl","title":"QRL","text":"<p>Following the guide here: https://docs.theqrl.org/use/node/install</p> <pre><code>/home/fr1t2/  \n    \u251c\u2500\u2500 .qrl/  \n    \u2502   \u251c\u2500\u2500 qrl_walletd.pid  \n    \u2502   \u2514\u2500\u2500 walletd.log  \n    \u251c\u2500\u2500 QRL\n    \u2502   \u2514\u2500\u2500 walletd-rest-proxy\n</code></pre>"},{"location":"QRL/QRL-Node/#install_the_qrl_node","title":"Install the QRL Node","text":"<p><pre><code>sudo apt-get -y install swig3.0 python3-dev python3-pip build-essential pkg-config libssl-dev libffi-dev libhwloc-dev libboost-dev cmake libleveldb-dev\npip3 install -U setuptools\npip3 install service-identity==21.1.0\npip3 install -U qrl\n</code></pre> Add the executable to the path:</p> <pre><code>export PATH=\"/home/fr1t2/.local/bin/:$PATH\"\n</code></pre>"},{"location":"QRL/QRL-Node/#bootstrap_qrl_node","title":"Bootstrap QRL Node","text":"<p>Grab the bootstrap files <code>cd ~/QRL &amp;&amp; wget https://cdn.qrl.co.in/mainnet/QRL_Mainnet_State.tar.gz</code></p> <pre><code># Extract the tar file\ntar xvf QRL_Mainnet_State.tar.gz\n# Creat the directory for the state\nmkdir -p ~/QRL/.qrl/data\n# Place the state\nmv state/ ~/QRL/.qrl/data/\n</code></pre>"},{"location":"QRL/QRL-WalletD/","title":"QRL WalletD","text":"<p>The QRL walletd-rest-proxy is required to run the QRL portion of the bot, giving unlimited wallet access to the xmss addresses and slave tree system.</p>"},{"location":"QRL/QRL-WalletD/#golang","title":"Golang","text":"<p>This requires GOLANG be installed.</p> <pre><code> curl -sL https://raw.githubusercontent.com/kevincobain2000/gobrew/master/git.io.sh | bash\n\n # then add to path\n\n    export PATH=\"$HOME/.gobrew/current/bin:$HOME/.gobrew/bin:$PATH\"\n    export GOROOT=\"$HOME/.gobrew/current/go\"\n</code></pre>"},{"location":"QRL/QRL-WalletD/#walletd-rest-proxy","title":"walletd-rest-proxy","text":"<p>Get the latest walletd-rest-proxy files from github </p> <pre><code>git clone https://github.com/theQRL/walletd-rest-proxy.git \ncd walletd-rest-proxy &amp;&amp; go build\n</code></pre>"},{"location":"QRL/QRL-WalletD/#startup_command","title":"Startup Command","text":"<pre><code> /home/fr1t2/QRL/walletd-rest-proxy/walletd-rest-proxy -serverIPPort 127.0.0.1:5359 -walletServiceEndpoint 127.0.0.1:19010 -log_dir /home/fr1t2/QRL/\n</code></pre>"},{"location":"Scripting/Crontab/","title":"Crontab","text":"<p>These services will be ran at a predetermined time using the crontab system.</p>"},{"location":"Scripting/Database/","title":"Database","text":"<p>These scripts are used for tasks related to the database.</p>"},{"location":"Scripting/Database/#anonymize_data","title":"Anonymize Data","text":""},{"location":"Scripting/Database/#create_database","title":"Create Database","text":""},{"location":"Scripting/Database/#create_tables","title":"Create Tables","text":""},{"location":"Scripting/Database/#delete_database","title":"Delete Database","text":""},{"location":"Scripting/Database/#delete_tables","title":"Delete Tables","text":""},{"location":"Scripting/Database/#export_user_data","title":"Export User Data","text":""},{"location":"Scripting/Database/#populate_test_data","title":"Populate Test Data","text":""},{"location":"Scripting/Database/#purge_old_data","title":"Purge Old Data","text":""},{"location":"Scripting/Services/","title":"Services","text":"<p>The startup services are used to trigger and control the various services the bot needs to function.</p> <p>These include nodes, databases API\u2019s, and the discord integration. Each one will need to be configured to function based on the server installation and folder structure.</p> <p>Service File Location</p> <p>The service files can be found in the repository at <code>/src/scripts/service_files</code></p>"},{"location":"Scripting/Services/#example","title":"Example","text":"<pre><code>[Unit]\nDescription=gzond node\nRequires=clef.service\nAfter=clef.service\n#Before=beacon.service\n\n[Service]\nExecStart=/home/fr1t2/zond-bot/src/scripts/startup/start-gzond.sh\nWorkingDirectory=/home/fr1t2/ZOND/gzond/\n\nType=simple\nRestart=always\nUser=fr1t2\nGroup=fr1t2\nRestartSec=60\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>"},{"location":"Scripting/Services/#beaconservice","title":"beacon.service","text":""},{"location":"Scripting/Services/#clefservice","title":"clef.service","text":""},{"location":"Scripting/Services/#gzondservice","title":"gzond.service","text":""},{"location":"Scripting/Services/#qrl-grpc-proxyservice","title":"qrl-grpc-proxy.service","text":""},{"location":"Scripting/Services/#qrl-walletdservice","title":"qrl-walletd.service","text":""},{"location":"Scripting/Services/#zond-apiservice","title":"zond-api.service","text":""},{"location":"Scripting/Services/#zond-botservice","title":"zond-bot.service","text":""},{"location":"Scripting/Startup/","title":"Startup","text":"<p>These startup guides will get the services needed to run the bot working through <code>systemctl</code> on the host server. While not required this simplifies startup and keeps the bot functioning without intervention on reboots. </p>"},{"location":"Scripting/Startup/#start-beaconsh","title":"start-beacon.sh","text":""},{"location":"Scripting/Startup/#start-gzondsh","title":"start-gzond.sh","text":""},{"location":"Scripting/Startup/#start-qrl-walletdsh","title":"start-qrl-walletd.sh","text":""},{"location":"Scripting/Startup/#start-qrlsh","title":"start-qrl.sh","text":"<p>Configure the QRL node to start using <code>systemctl</code> startup scripting</p> <ol> <li>Modify the startup script found in the bot repo <code>/src/scripts/startup/start-qrl.sh</code> to fit to the local install (Most important is the default directory, which should be the block storage mount). </li> <li>Test the node starts with the script, and the data is being written to the right location.</li> <li>modify the service file for the QRL in the <code>zond-bot/src/scripts/service_files</code> directory.</li> <li>Move the file to the <code>/etc/systemctl/system/...</code> reload the services <code>systemctl daemon-reload</code></li> <li>start the service, and the node <code>systemctl start qrl.service</code></li> <li>enable the service <code>systemctl enable qrl.service</code> to let it start on startup and failure</li> </ol>"},{"location":"Scripting/Startup/#start-zond-apish","title":"start-zond-api.sh","text":""},{"location":"Scripting/Startup/#start-zond-botsh","title":"start-zond-bot.sh","text":""},{"location":"Zond/Zond-Node/","title":"Zond Node","text":""},{"location":"Zond/Zond-Node/#zond","title":"ZOND","text":"<p>Install following the guide at https://test-zond.theqrl.org/install</p> <p>changes to the install process below</p> <ul> <li>all build files are moved to the <code>~/.local/bin</code> directory that is added to $PATH</li> <li>gzond <code>make all</code> to get the clef exe</li> </ul>"},{"location":"Zond/Zond-Node/#overall","title":"Overall","text":"<p>Zond node is structured in the following way:</p> <pre><code>/home/fr1t2/  \n    \u2514\u2500\u2500 ZOND\n        \u251c\u2500\u2500 beacon\n        \u2502   \u251c\u2500\u2500 beacon-chain\n        \u2502   \u251c\u2500\u2500 beacondata\n        \u2502   \u2502   \u251c\u2500\u2500 beaconchaindata\n        \u2502   \u2502   \u251c\u2500\u2500 metaData\n        \u2502   \u2502   \u251c\u2500\u2500 network-keys\n        \u2502   \u2502   \u2514\u2500\u2500 tosaccepted\n        \u2502   \u251c\u2500\u2500 client-stats\n        \u2502   \u251c\u2500\u2500 qrysmctl\n        \u2502   \u2514\u2500\u2500 validator\n        \u251c\u2500\u2500 clef\n        \u2502   \u251c\u2500\u2500 30c2553dea2516dc1a70\n        \u2502   \u2502   \u2514\u2500\u2500 config.json\n        \u2502   \u251c\u2500\u2500 audit.log\n        \u2502   \u251c\u2500\u2500 clef.ipc\n        \u2502   \u251c\u2500\u2500 masterseed.json\n        \u2502   \u251c\u2500\u2500 rules.js\n        \u2502   \u251c\u2500\u2500 secrets.sh\n        \u2502   \u2514\u2500\u2500 signer.txt\n        \u251c\u2500\u2500 gzond\n        \u2502   \u251c\u2500\u2500 go-zond\n        \u2502   \u2514\u2500\u2500 gzonddata\n        \u2502       \u251c\u2500\u2500 config.yml\n        \u2502       \u251c\u2500\u2500 genesis.ssz\n        \u2502       \u251c\u2500\u2500 gzond\n        \u2502       \u2514\u2500\u2500 gzond.ipc\n        \u251c\u2500\u2500 keystore\n        \u2514\u2500\u2500 lost+found\n</code></pre>"},{"location":"Zond/Zond-Node/#startup_files","title":"startup files","text":"<p>modify the start up scripts to suit.</p> <p>Enable system services and start all zond processes</p> <ul> <li>clef.service</li> <li>gzond.service</li> <li>beacon.service</li> </ul> <p>ensure chain syncs when started and clef takes control</p>"},{"location":"Zond/Zond-Node/#clef_configuration","title":"CLEF configuration","text":"<p>The startup file lays out the command that starts clef.</p> <p>You must enable the masterseed first with a password, then save that password in the secrets.sh.example file and rename it to secrets.sh and place it in the default clef directory (~/ZOND/clef/)</p> <p>This password is loaded to the module with a pipe (|) to pass the secret to the program when started. The terms enter \u201cok\u201d is being suppressed with <code>--</code></p>"},{"location":"Zond/ZondWallets/","title":"Zond Wallets","text":"<p>Zond tipbot wallets ~~are~~ ==will be== handled by <code>clef</code></p> <p>This tool handles all of the encryption and decryption as well as storing secrets for the wallets.</p> <p>build with make all in the go-zond directory. The executable will be located in <code>go-zond/build/bin/</code> with a bunch of other tools </p> <p>Once complete we need to run the <code>init</code> command to initialize the wallet.</p> <p>Testnet zond info</p> <ul> <li>masterseed encryption: password123 A master seed has been generated into /home/fr1t2/.clef/masterseed.json</li> </ul>"}]}